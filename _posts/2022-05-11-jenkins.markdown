---
layout: post
title: DevOps – Jenkins
description: Use Vagrant to set up a Ubuntu virtual machine with Jenkins, Blue Ocean and SonarQube.
img: jenk.jpg # Add image post (optional)
tags: [DevOps, Jenkins, BlueOcean]
---

<html>
<head><meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>jenkins</title><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>

<style type="text/css">
  pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.highlight .hll { background-color: #ffffcc }
.highlight { background: #f8f8f8; }
.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #9C6500 } /* Comment.Preproc */
.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */
.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #E40000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #008400 } /* Generic.Inserted */
.highlight .go { color: #717171 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #687822 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #767600 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #666666 } /* Literal.Number.Bin */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sa { color: #BA2121 } /* Literal.String.Affix */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #A45A77 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #0000FF } /* Name.Function.Magic */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .vm { color: #19177C } /* Name.Variable.Magic */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>
  
  
<!-- Load mathjax -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"> </script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    init_mathjax = function() {
        if (window.MathJax) {
        // MathJax loaded
            MathJax.Hub.Config({
                TeX: {
                    equationNumbers: {
                    autoNumber: "AMS",
                    useLabelIds: true
                    }
                },
                tex2jax: {
                    inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                    displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
                    processEscapes: true,
                    processEnvironments: true
                },
                displayAlign: 'center',
                CommonHTML: {
                    linebreaks: {
                    automatic: true
                    }
                }
            });

            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
    }
    init_mathjax();
    </script>
    <!-- End of mathjax configuration --></head>
<body>

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Jenkins">Jenkins<a class="anchor-link" href="#Jenkins">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Objective</strong><br>
Use Vagrant to set up a Ubuntu virtual machine with Jenkins, Blue Ocean and SonarQube.</p>
<p><strong>Step 1: Use Vagrant to set up a Ubuntu virtual machine with Jenkins, Blue Ocean and SonarQube plugin.</strong></p>
<p>Setting up VM vagrantfile:<br>
I created a vagrantfile to set up my new VM with xenial64. I set up NAT networking with port forwarding, created a shared directory, and allocated memory.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="c1"># encoding: utf-8</span>
<span class="c1"># -*- mode: ruby -*-</span>
<span class="c1"># vi: set ft=ruby :</span>
<span class="c1"># Box / OS</span>
<span class="n">VAGRANT_BOX</span> <span class="o">=</span> <span class="s1">&#39;ubuntu/xenial64&#39;</span>
<span class="c1"># Memorable name for your</span>
<span class="n">VM_NAME</span> <span class="o">=</span> <span class="s1">&#39;DevOps&#39;</span>
<span class="c1"># VM User — &#39;vagrant&#39; by default</span>
<span class="n">VM_USER</span> <span class="o">=</span> <span class="s1">&#39;vagrant&#39;</span>
<span class="c1"># Username on your Mac</span>
<span class="n">MAC_USER</span> <span class="o">=</span> <span class="s1">&#39;cristinconnerney&#39;</span>

<span class="c1"># Host folder to sync</span>
<span class="n">HOST_PATH</span> <span class="o">=</span> <span class="s1">&#39;/Users/&#39;</span> <span class="o">+</span> <span class="n">MAC_USER</span> <span class="o">+</span> <span class="s1">&#39;/Desktop/&#39;</span> <span class="o">+</span> <span class="n">VM_NAME</span>
<span class="c1"># Where to sync to on Guest — &#39;vagrant&#39; is the default user name</span>
<span class="n">GUEST_PATH</span> <span class="o">=</span> <span class="s1">&#39;/home/&#39;</span> <span class="o">+</span> <span class="n">VM_USER</span> <span class="o">+</span> <span class="s1">&#39;/Desktop/&#39;</span> <span class="o">+</span> <span class="n">VM_NAME</span>

<span class="c1"># # VM Port — uncomment this to use NAT instead of DHCP</span>
<span class="c1"># VM_PORT = 8080</span>
<span class="n">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="c1"># Vagrant box from Hashicorp</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="n">VAGRANT_BOX</span>
  
  <span class="c1"># Actual machine name</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="n">VM_NAME</span>
  <span class="c1"># Set VM name in Virtualbox</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="n">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
    <span class="n">v</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">VM_NAME</span>
    <span class="n">v</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">10000</span>
  <span class="n">end</span>

  <span class="c1">#DHCP — comment this out if planning on using NAT instead</span>
  <span class="c1"># config.vm.network &quot;private_network&quot;, type: &quot;dhcp&quot;</span>
  <span class="c1"># # Port forwarding — uncomment this to use NAT instead of DHCP</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="n">guest</span><span class="p">:</span> <span class="mi">8080</span><span class="p">,</span> <span class="n">host</span><span class="p">:</span> <span class="mi">8080</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="n">guest</span><span class="p">:</span> <span class="mi">9000</span><span class="p">,</span> <span class="n">host</span><span class="p">:</span> <span class="mi">9000</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="n">guest</span><span class="p">:</span> <span class="mi">8888</span><span class="p">,</span> <span class="n">host</span><span class="p">:</span> <span class="mi">8888</span>
  <span class="c1"># Sync folder</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="n">HOST_PATH</span><span class="p">,</span> <span class="n">GUEST_PATH</span>
  <span class="c1"># Disable default Vagrant folder, use a unique path per project</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="s1">&#39;/home/&#39;</span><span class="o">+</span><span class="n">VM_USER</span><span class="o">+</span><span class="s1">&#39;/Desktop/&#39;</span><span class="p">,</span> <span class="n">disabled</span><span class="p">:</span> <span class="n">true</span>

  <span class="c1"># Install Git, Node.js 6.x.x, Latest npm</span>

  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="n">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="n">SHELL</span>
    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">git</span>
    <span class="n">curl</span> <span class="o">-</span><span class="n">sL</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">deb</span><span class="o">.</span><span class="n">nodesource</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">setup_6</span><span class="o">.</span><span class="n">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="o">-</span><span class="n">E</span> <span class="n">bash</span> <span class="o">-</span>
    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">nodejs</span>
    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">build</span><span class="o">-</span><span class="n">essential</span>
    <span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">npm</span>
    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span> <span class="o">-</span><span class="n">y</span>
    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">autoremove</span> <span class="o">-</span><span class="n">y</span>
  <span class="n">SHELL</span>
<span class="n">end</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>I used <code>vagrant up</code> and <code>vagrant ssh</code> to start the machine and ssh in.</p>
<p>To install jenkins, I first had to install java and then added the keys for jenkins.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">openjdk</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="n">jdk</span>
<span class="n">wget</span> <span class="o">-</span><span class="n">q</span> <span class="o">-</span><span class="n">O</span> <span class="o">-</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">pkg</span><span class="o">.</span><span class="n">jenkins</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">debian</span><span class="o">/</span><span class="n">jenkins</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">key</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">key</span> <span class="n">add</span> <span class="o">-</span>
<span class="n">sudo</span> <span class="n">sh</span> <span class="o">-</span><span class="n">c</span> <span class="s1">&#39;echo deb https://pkg.jenkins.io/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span> <span class="o">&amp;&amp;</span> <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">jenkins</span>
<span class="n">sudo</span> <span class="n">service</span> <span class="n">jenkins</span> <span class="n">start</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>I allowed port 8080 on the firewall and networked it in the vagrantfile to access the jenkins server. I did the same for port 8888 and 9000, to be used later.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">sudo</span> <span class="n">ufw</span> <span class="n">allow</span> <span class="mi">8080</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>When I accessed jenkins on my host browser, i used <code>http://localhost:8080</code>. First logging in I had to get the admin password from inside my VM.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">sudo</span> <span class="n">cat</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">jenkins</span><span class="o">/</span><span class="n">secrets</span><span class="o">/</span><span class="n">initialAdminPassword</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Then I created an admin for Jenkins and was able to navigate the site. I installed the plugins <strong><em>Blue Ocean</em></strong> and <strong><em>SonarQube Scanner</em></strong> from manage jenkins - manage plugins</p>
<p>To run SonarQube on my VM, I first installed docker</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">remove</span> <span class="n">docker</span> <span class="n">docker</span><span class="o">-</span><span class="n">engine</span> <span class="n">docker</span><span class="o">.</span><span class="n">io</span> <span class="n">containerd</span> <span class="n">runc</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> \
    <span class="n">ca</span><span class="o">-</span><span class="n">certificates</span> \
    <span class="n">curl</span> \
    <span class="n">gnupg</span> \
    <span class="n">lsb</span><span class="o">-</span><span class="n">release</span>
<span class="n">curl</span> <span class="o">-</span><span class="n">fsSL</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">download</span><span class="o">.</span><span class="n">docker</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">ubuntu</span><span class="o">/</span><span class="n">gpg</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">gpg</span> <span class="o">--</span><span class="n">dearmor</span> <span class="o">-</span><span class="n">o</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">keyrings</span><span class="o">/</span><span class="n">docker</span><span class="o">-</span><span class="n">archive</span><span class="o">-</span><span class="n">keyring</span><span class="o">.</span><span class="n">gpg</span>

<span class="n">echo</span> \
  <span class="s2">&quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu </span><span class="se">\</span>
<span class="s2">  $(lsb_release -cs) stable&quot;</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">tee</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">apt</span><span class="o">/</span><span class="n">sources</span><span class="o">.</span><span class="n">list</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">docker</span><span class="o">.</span><span class="n">list</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>

<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">docker</span><span class="o">-</span><span class="n">ce</span> <span class="n">docker</span><span class="o">-</span><span class="n">ce</span><span class="o">-</span><span class="n">cli</span> <span class="n">containerd</span><span class="o">.</span><span class="n">io</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The following command runs sonarqube in a docker container and sets up the specific port to listen on.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">d</span> <span class="o">--</span><span class="n">name</span> <span class="n">sonarqube</span> <span class="o">-</span><span class="n">e</span> <span class="n">SONAR_ES_BOOTSTRAP_CHECKS_DISABLE</span><span class="o">=</span><span class="n">true</span> <span class="o">-</span><span class="n">p</span> <span class="mi">9000</span><span class="p">:</span><span class="mi">9000</span> <span class="n">sonarqube</span><span class="p">:</span><span class="n">latest</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>I can now access sonarqube with <code>http://localhost:9000</code>.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Step 2: Use Jenkins to build petclinic.jar.</strong></p>
<p>To configure SonarSube with Jenins, I first went to the sonarqube dashboard in my browser and navigated to Administration - Security - Users. I generated a token for my user:
<br/><br/>
b821cfefda6b2d20b8304f95885b9abfa2f7a545
<br/><br/>
On the Jenkins side, I went to manage jenkins - add sonarqube server - and I added the address for my sonarqube server <code>http://localhost:9000</code>. I checked the selection for environmental variabes, as I'm going to need it in my pipeline. I added the token into the authentication as 'secret text'. Next, I went into manage plugins and set the name 'Sonar' for my sonarqube scanner.</p>
<p>To build PetClinic, I went to jenkins, selected new item, and selected Pipeline. I checked github project and linked the project url '<a href="https://github.com/spring-projects/spring-petclinic.git/">https://github.com/spring-projects/spring-petclinic.git/</a>'. Under build triggers, I selected GitHub hook trigger for GITsm polling. Next, I write a pipeline script:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">pipeline</span> <span class="p">{</span>
    <span class="n">agent</span> <span class="nb">any</span>

    <span class="n">stages</span> <span class="p">{</span>
        <span class="n">stage</span><span class="p">(</span><span class="s1">&#39;Clone&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">steps</span> <span class="p">{</span>
                <span class="n">deleteDir</span><span class="p">()</span>
                <span class="o">//</span> <span class="n">Get</span> <span class="n">some</span> <span class="n">code</span> <span class="kn">from</span> <span class="nn">a</span> <span class="n">GitHub</span> <span class="n">repository</span>
                <span class="n">sh</span> <span class="s1">&#39;git clone https://github.com/spring-projects/spring-petclinic.git&#39;</span>

            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">stage</span><span class="p">(</span><span class="s1">&#39;Build &amp; Scan&#39;</span><span class="p">){</span>
            <span class="n">steps</span><span class="p">{</span>
                <span class="n">withSonarQubeEnv</span><span class="p">(</span><span class="s1">&#39;Sonar&#39;</span><span class="p">){</span> 
                    <span class="n">sh</span> <span class="s1">&#39;&#39;&#39;</span>
<span class="s1">                    cd spring-petclinic</span>
<span class="s1">                    ./mvnw package sonar:sonar -Dsonar.projectKey=PetClinicProj -Dsonar.host.url:http://localhost:9000 -Dsonar.login:a3332f95bdc04785bb6994ab331f14f2ea668a66</span>
<span class="s1">                    &#39;&#39;&#39;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Step 1 clones the GitHub repository and Step 2 builds and scans spring-petclinic and performs the analysis. In step 1, I made sure I was deleting the directory because everytime I ran the test I was creating a new directory. In step 2, I used withSonarQubeEnv('Sonar'), directing to the sonarqube configuration I set up eariler in jenkins. When I ran this, I had to run a few tacs to set up the projectKey, sonar hosturl, and token. The next step is to save the configurations and 'Build Now.'</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Step 3: Visualize the build process with Blue Ocean</strong><br>
Visualizing the build with Blue Ocean was simple. After I created a successfully pipeline and wasn't recieiving any errors, I opened Blue Ocean. This allowed me to run a step in the pipeline and visualize the process in the console.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Step 4: Use SonarQube to do a statis analysis of PetClinic</strong><br>
After executing the build process and using SonarQube in a bulid step, I was able to see my project on the localhost sonarqube server. In the PetClinic analysis, my project scored an A in reliability, D in security, A in security review, and A in maintainability.
There were 0 bugs, 9 vulnerabilities, and 0 security hotspots. There was 1h 12min of debt, and 10 code smells.
There was 90.4% converage on 258 lines to cover, 39 unit tests, 0.0% duplication on 1.1k lines, and 0 duplicated blocks.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Step 5: Execute PetClinic</strong><br>
To execute PetClinic, I use the actions specified in the Github sample application for running petclinic locally. An important step in this configuration was specifying the server to run on port 8888, as the default port 8080 won't work because jenkins is running on 8080.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">spring</span><span class="o">-</span><span class="n">projects</span><span class="o">/</span><span class="n">spring</span><span class="o">-</span><span class="n">petclinic</span><span class="o">.</span><span class="n">git</span>
<span class="n">cd</span> <span class="n">spring</span><span class="o">-</span><span class="n">petclinic</span>
<span class="o">./</span><span class="n">mvnw</span> <span class="n">package</span>
<span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="n">target</span><span class="o">/*.</span><span class="n">jar</span> <span class="o">--</span><span class="n">spring</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">json</span><span class="o">=</span><span class="s1">&#39;{&quot;server.port&quot;:8888}&#39;</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Step 6: Copy petclinic.jar to host machine</strong></p>
<p>I copied the file from the directory in spring-petclinic to the shared folder that was setup earlier in my vagrantfile.</p>
<p>Vagrantfile setup specific to synced_folder:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">VM_NAME</span> <span class="o">=</span> <span class="s1">&#39;DevOps&#39;</span>
<span class="n">VM_USER</span> <span class="o">=</span> <span class="s1">&#39;vagrant&#39;</span>
<span class="n">MAC_USER</span> <span class="o">=</span> <span class="s1">&#39;cristinconnerney&#39;</span>
<span class="n">HOST_PATH</span> <span class="o">=</span> <span class="s1">&#39;/Users/&#39;</span> <span class="o">+</span> <span class="n">MAC_USER</span> <span class="o">+</span> <span class="s1">&#39;/Desktop/&#39;</span> <span class="o">+</span> <span class="n">VM_NAME</span>
<span class="n">GUEST_PATH</span> <span class="o">=</span> <span class="s1">&#39;/home/&#39;</span> <span class="o">+</span> <span class="n">VM_USER</span> <span class="o">+</span> <span class="s1">&#39;/Desktop/&#39;</span> <span class="o">+</span> <span class="n">VM_NAME</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="n">HOST_PATH</span><span class="p">,</span> <span class="n">GUEST_PATH</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Copy command in VM:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="n">cp</span> <span class="o">./</span><span class="n">spring</span><span class="o">-</span><span class="n">petclinic</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">spring</span><span class="o">-</span><span class="n">petclinic</span><span class="o">-</span><span class="mf">2.5.0</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="o">.</span><span class="n">jar</span> <span class="o">./</span><span class="n">Desktop</span><span class="o">/</span><span class="n">DevOps</span>
</pre></div>

    </div>
</div>
</div>

</div>

</body>







</html>
