---
layout: post
title: NLP Federalist Papers
description: Using two techniques to analyze The Federalist papers, a bag of words approach based on a TFIDF matrix and an n-gram language model. The Federalist papers were a series of essays written in 1787 and 1788 by Alexander Hamilton, James Madison, and John Jay that promoted the ratification of the U.S. Constitution.
img: fp.jpg # Add image post (optional)
tags: [Ngram, TFIDF, NLP, perplexity]
---

<html>
<head><meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>fp</title><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>

<style type="text/css">
  pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.highlight .hll { background-color: #ffffcc }
.highlight { background: #f8f8f8; }
.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #9C6500 } /* Comment.Preproc */
.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */
.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #E40000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #008400 } /* Generic.Inserted */
.highlight .go { color: #717171 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #687822 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #767600 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #666666 } /* Literal.Number.Bin */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sa { color: #BA2121 } /* Literal.String.Affix */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #A45A77 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #0000FF } /* Name.Function.Magic */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .vm { color: #19177C } /* Name.Variable.Magic */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

<!-- Load mathjax -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"> </script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    init_mathjax = function() {
        if (window.MathJax) {
        // MathJax loaded
            MathJax.Hub.Config({
                TeX: {
                    equationNumbers: {
                    autoNumber: "AMS",
                    useLabelIds: true
                    }
                },
                tex2jax: {
                    inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                    displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
                    processEscapes: true,
                    processEnvironments: true
                },
                displayAlign: 'center',
                CommonHTML: {
                    linebreaks: {
                    automatic: true
                    }
                }
            });

            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
    }
    init_mathjax();
    </script>
    <!-- End of mathjax configuration --></head>
<body>

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="NLP-Federalist-Papers">NLP Federalist Papers<a class="anchor-link" href="#NLP-Federalist-Papers">&#182;</a></h1><p>Using two techniques to analyze free text documents: a bag of words approach based on a TFIDF matrix and an n-gram language model.</p>
<p>The Federalist papers were a series of essays written in 1787 and 1788 by Alexander Hamilton, James Madison, and John Jay (they were published anonymously at the time), that promoted the ratification of the U.S. Constitution. The authorship of most of the essays has been long known since around the deaths of Hamilton and Madison, but there was still some question about the authorship of certain articles into the 20th century. We'll use document vectors and language models to do this analysis.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections</span> 
<span class="kn">import</span> <span class="nn">itertools</span>
<span class="kn">import</span> <span class="nn">gzip</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">scipy.sparse</span> <span class="k">as</span> <span class="nn">sp</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">load_federalist_corpus</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s2">&quot;pg18.txt.gz&quot;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf8&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Load the federalist papers as a tokenized list of strings&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="n">gzip</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;rt&quot;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">papers</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;FEDERALIST&quot;</span><span class="p">)</span>
    
    <span class="c1"># all start with &quot;To the people of the State of New York:&quot; (sometimes . instead of :)</span>
    <span class="c1"># all end with PUBLIUS (or no end at all)</span>
    <span class="n">locations</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">,[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;of the State of New York&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">)],</span>
                 <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;PUBLIUS&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">)])</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">p</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">papers</span><span class="p">)]</span>
    <span class="n">papers_content</span> <span class="o">=</span> <span class="p">[</span><span class="n">papers</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="nb">max</span><span class="p">(</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span><span class="nb">max</span><span class="p">(</span><span class="n">loc</span><span class="p">[</span><span class="mi">2</span><span class="p">])]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">loc</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">locations</span><span class="p">)]</span>

    <span class="c1"># discard entries that are not actually a paper</span>
    <span class="n">papers_content</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">papers_content</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span>

    <span class="c1"># replace all whitespace with a single space</span>
    <span class="n">papers_content</span> <span class="o">=</span> <span class="p">[</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;\s+&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">papers_content</span><span class="p">]</span>

    <span class="c1"># add spaces before all punctuation, so they are separate tokens</span>
    <span class="n">punctuation</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;[^\w\s]+&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">papers_content</span><span class="p">)))</span> <span class="o">-</span> <span class="p">{</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="s2">&quot;&#39;&quot;</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">punctuation</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
        <span class="n">papers_content</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="o">+</span><span class="n">c</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">papers_content</span><span class="p">]</span>
    <span class="n">papers_content</span> <span class="o">=</span> <span class="p">[</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;\s+&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">papers_content</span><span class="p">]</span>
    
    <span class="n">authors</span> <span class="o">=</span> <span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&quot;MADISON|JAY|HAMILTON&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">))</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">papers</span><span class="p">]</span>
    <span class="n">authors</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">authors</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span>
    
    <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;No\. \d+&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">papers</span> <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;No\. \d+&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">)]</span>
    
    <span class="k">return</span> <span class="n">papers_content</span><span class="p">,</span> <span class="n">authors</span><span class="p">,</span> <span class="n">numbers</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">papers_content</span><span class="p">,</span> <span class="n">authors</span><span class="p">,</span> <span class="n">numbers</span> <span class="o">=</span> <span class="n">load_federalist_corpus</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s2">&quot;pg18.txt.gz&quot;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf8&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Bag-of-words,-and-TFIDF">Bag of words, and TFIDF<a class="anchor-link" href="#Bag-of-words,-and-TFIDF">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">tfidf</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>

    <span class="n">words</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">)</span>
    <span class="n">vocab</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span>
    
    <span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">vocab</span><span class="p">)))}</span>

    <span class="n">idf</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">dict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span> 
        <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
                <span class="n">idf</span><span class="p">[</span><span class="n">w</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>

    <span class="n">idf</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span><span class="o">/</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">idf</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>

    <span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>
        <span class="n">tokens</span> <span class="o">=</span> <span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">dict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="n">tfidf</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">*</span> <span class="n">idf</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">tfidf</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">rows</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="c1"># doc number</span>
                <span class="n">cols</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">w</span><span class="p">])</span> <span class="c1"># word number </span>
                <span class="n">values</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tfidf</span><span class="p">)</span> <span class="c1"># tfidf score </span>

    <span class="n">spm</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">coo_matrix</span><span class="p">((</span><span class="n">values</span><span class="p">,</span> <span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">)))</span><span class="o">.</span><span class="n">tocsr</span><span class="p">()</span> <span class="c1"># tfidf, doc number, word index</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">spm</span><span class="p">,</span><span class="nb">list</span><span class="p">(</span><span class="nb">dict</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>

<span class="n">tfidf_matrix</span><span class="p">,</span> <span class="n">all_words</span> <span class="o">=</span> <span class="n">tfidf</span><span class="p">(</span><span class="n">papers_content</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="o">.</span><span class="n">nnz</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>  (0, 3)	1.2354714713853068
  (0, 4)	1.2354714713853068
  (0, 6)	1.8152899666382492
  (0, 9)	1.1221427860783038
  (0, 41)	0.2799600263578706
  (0, 59)	0.6931471805599453
  (0, 91)	2.2571227189172887
  (0, 110)	3.7612001156935624
  (0, 128)	1.5099083170870673
  (0, 153)	2.5084371471981948
  (0, 173)	0.6931471805599453
  (0, 185)	2.662587827025453
  (0, 192)	1.4098248585300848
  (0, 197)	1.1221427860783038
  (0, 198)	2.056452023455137
  (0, 236)	0.7654678421395714
  (0, 245)	2.2571227189172887
  (0, 248)	3.778795877583942
  (0, 261)	0.8708283577973976
  (0, 266)	1.1962507582320256
  (0, 278)	2.5084371471981948
  (0, 283)	1.6817585740137264
  (0, 290)	3.7612001156935624
  (0, 302)	1.1221427860783038
  (0, 312)	1.9772227869075625
  :	:
  (85, 8515)	2.662587827025453
  (85, 8527)	1.3862943611198906
  (85, 8533)	0.30056440609867574
  (85, 8534)	3.7612001156935624
  (85, 8559)	0.35536235447490483
  (85, 8563)	0.6175561626124464
  (85, 8567)	0.22024079165624835
  (85, 8569)	3.127951076714686
  (85, 8574)	1.2869868165550757
  (85, 8581)	0.8489944378648627
  (85, 8583)	0.8398800790736118
  (85, 8585)	0.8167611365271219
  (85, 8588)	3.127951076714686
  (85, 8607)	1.363304842895192
  (85, 8622)	0.5330435317123572
  (85, 8637)	1.363304842895192
  (85, 8638)	7.261159866552997
  (85, 8646)	3.778795877583942
  (85, 8656)	2.5084371471981948
  (85, 8672)	0.6544258224168324
  (85, 8673)	1.889397938791971
  (85, 8678)	4.514245437834577
  (85, 8680)	11.37963753527763
  (85, 8683)	1.4586150226995167
  (85, 8685)	5.325175654050906
57607
(86, 8686)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Cosine-Similarity">Cosine Similarity<a class="anchor-link" href="#Cosine-Similarity">&#182;</a></h3><p>Take the X_tfidf matrix and compute a matrix of all pair-wise cosine similarities.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>

    <span class="n">dense</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">todense</span><span class="p">()</span>
    <span class="n">cos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">dense</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">dense</span><span class="p">)))</span>

    <span class="k">for</span> <span class="n">n1</span><span class="p">,</span><span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dense</span><span class="p">):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ravel</span><span class="p">(</span><span class="n">dense</span><span class="p">[</span><span class="n">n1</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">n2</span><span class="p">,</span> <span class="n">row2</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dense</span><span class="p">):</span>
            <span class="n">row2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ravel</span><span class="p">(</span><span class="n">dense</span><span class="p">[</span><span class="n">n2</span><span class="p">])</span>
            <span class="n">cos</span><span class="p">[</span><span class="n">n1</span><span class="p">,</span><span class="n">n2</span><span class="p">]</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">row</span><span class="p">,</span><span class="n">row2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">row</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">row2</span><span class="p">))</span>
            
    <span class="k">return</span> <span class="n">cos</span>

<span class="n">cosine_similarity</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>array([[1.        , 0.09233773, 0.06292393, ..., 0.05999825, 0.07781681,
        0.1904696 ],
       [0.09233773, 1.        , 0.0956748 , ..., 0.05403343, 0.10726034,
        0.11175992],
       [0.06292393, 0.0956748 , 1.        , ..., 0.09040963, 0.07130152,
        0.0891038 ],
       ...,
       [0.05999825, 0.05403343, 0.09040963, ..., 1.        , 0.12918467,
        0.09258692],
       [0.07781681, 0.10726034, 0.07130152, ..., 0.12918467, 1.        ,
        0.15381251],
       [0.1904696 , 0.11175992, 0.0891038 , ..., 0.09258692, 0.15381251,
        1.        ]])</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Analyzing-document-authorship">Analyzing document authorship<a class="anchor-link" href="#Analyzing-document-authorship">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">author_cosine_similarity</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">authors</span><span class="p">):</span>

    <span class="n">tfidf_matrix</span><span class="p">,</span> <span class="n">all_words</span> <span class="o">=</span> <span class="n">tfidf</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    <span class="n">cos</span> <span class="o">=</span> <span class="n">cosine_similarity</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="p">)</span>
    <span class="n">unknown</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">authors</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">]</span>

    <span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>

    <span class="n">counts</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">authors</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">authors</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="s1">&#39;HAMILTON&#39;</span><span class="p">,):</span>
            <span class="k">for</span> <span class="n">n2</span> <span class="ow">in</span> <span class="n">unknown</span><span class="p">:</span>
                <span class="n">h</span><span class="o">+=</span> <span class="n">cos</span><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n2</span><span class="p">]</span>
                <span class="n">counts</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span><span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">authors</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="s1">&#39;MADISON&#39;</span><span class="p">,):</span>
            <span class="k">for</span> <span class="n">n2</span> <span class="ow">in</span> <span class="n">unknown</span><span class="p">:</span>
                <span class="n">m</span><span class="o">+=</span> <span class="n">cos</span><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n2</span><span class="p">]</span>
                <span class="n">counts</span><span class="p">[</span><span class="s1">&#39;m&#39;</span><span class="p">]</span><span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">authors</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="s1">&#39;JAY&#39;</span><span class="p">,):</span>
            <span class="k">for</span> <span class="n">n2</span> <span class="ow">in</span> <span class="n">unknown</span><span class="p">:</span>
                <span class="n">j</span><span class="o">+=</span> <span class="n">cos</span><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n2</span><span class="p">]</span>
                <span class="n">counts</span><span class="p">[</span><span class="s1">&#39;j&#39;</span><span class="p">]</span><span class="o">+=</span> <span class="mi">1</span>
    
    <span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="o">/</span><span class="n">counts</span><span class="p">[</span><span class="s1">&#39;h&#39;</span><span class="p">]</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">m</span><span class="o">/</span><span class="n">counts</span><span class="p">[</span><span class="s1">&#39;m&#39;</span><span class="p">]</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">/</span><span class="n">counts</span><span class="p">[</span><span class="s1">&#39;j&#39;</span><span class="p">]</span>

    <span class="k">return</span> <span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
    
<span class="n">author_cosine_similarity</span><span class="p">(</span><span class="n">papers_content</span><span class="p">,</span> <span class="n">authors</span><span class="p">)</span> 
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(0.06988132731408156, 0.0898774281671743, 0.06493934881438047)</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="N-gram-language-model">N-gram language model<a class="anchor-link" href="#N-gram-language-model">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">class</span> <span class="nc">LanguageModel</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">docs</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">counts</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span> <span class="c1"># Dict from space-separated &quot;previous words&quot; to a Dict of (next word, count). </span>
        <span class="bp">self</span><span class="o">.</span><span class="n">count_sums</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># Dict from &quot;previous words&quot; to the total number of times they appear</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span> 
        <span class="bp">self</span><span class="o">.</span><span class="n">vocab</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">:</span>
            <span class="n">words</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">vocab</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">:</span>
            <span class="n">words</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">c</span><span class="p">,</span><span class="n">w</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">:]):</span>
                <span class="n">prevw</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">c</span><span class="p">:</span><span class="n">c</span><span class="o">+</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)])</span> <span class="c1"># c is offset </span>
                <span class="k">if</span> <span class="n">prevw</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">counts</span><span class="p">:</span>
                        <span class="bp">self</span><span class="o">.</span><span class="n">counts</span><span class="p">[</span><span class="n">prevw</span><span class="p">]</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
                        <span class="bp">self</span><span class="o">.</span><span class="n">count_sums</span><span class="p">[</span><span class="n">prevw</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">counts</span><span class="p">[</span><span class="n">prevw</span><span class="p">][</span><span class="n">w</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">count_sums</span><span class="p">[</span><span class="n">prevw</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>

    <span class="k">def</span> <span class="nf">perplexity</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">):</span>
        
        <span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

        <span class="n">v</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="n">v</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">vocab</span><span class="p">:</span>
            <span class="n">v</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        <span class="n">vocab</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>

        <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">c</span><span class="p">,</span><span class="n">w</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">:]):</span>
            <span class="n">prevw</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">c</span><span class="p">:</span><span class="n">c</span><span class="o">+</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)])</span> 
            <span class="k">if</span> <span class="n">prevw</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">counts</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">counts</span><span class="p">[</span><span class="n">prevw</span><span class="p">]</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">count_sums</span><span class="p">[</span><span class="n">prevw</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">counts</span><span class="p">[</span><span class="n">prevw</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">log2</span><span class="p">(</span>
                <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">counts</span><span class="p">[</span><span class="n">prevw</span><span class="p">][</span><span class="n">w</span><span class="p">]</span><span class="o">+</span><span class="n">alpha</span><span class="p">)</span><span class="o">/</span>
                <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">count_sums</span><span class="p">[</span><span class="n">prevw</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="p">(</span><span class="n">vocab</span><span class="p">))))</span> 

        <span class="n">pp</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="p">(</span><span class="o">-</span><span class="n">s</span> <span class="o">/</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span>

        <span class="k">return</span> <span class="n">pp</span> 

<span class="n">fedLM</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">papers_content</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">fedLM</span><span class="o">.</span><span class="n">perplexity</span><span class="p">(</span><span class="s2">&quot;continue to be free&quot;</span><span class="p">)</span> 
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>51.043953201764005</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Author-identification-via-language-models">Author identification via language models<a class="anchor-link" href="#Author-identification-via-language-models">&#182;</a></h3><p>Evaluate the mean of the perplexity of the unknown Federalist papers for the language models from each of the three authors.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">mean_perplexity</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">authors</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Evaluate the mean of the perplexity of the unknown Federalist papers for the language models</span>
<span class="sd">    from each of the three authors (n=3 and alpha=1e-3)</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="n">unknown</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">authors</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">]</span>

    <span class="n">hlist</span><span class="p">,</span> <span class="n">mlist</span><span class="p">,</span> <span class="n">jlist</span> <span class="o">=</span> <span class="p">[],[],[]</span>
    <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">authors</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">authors</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="s1">&#39;HAMILTON&#39;</span><span class="p">,):</span>
            <span class="n">hlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">docs</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">authors</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="s1">&#39;MADISON&#39;</span><span class="p">,):</span>
            <span class="n">mlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">docs</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">authors</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="s1">&#39;JAY&#39;</span><span class="p">,):</span>
            <span class="n">jlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">docs</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>

    <span class="n">hLM</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">hlist</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">mLM</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">jLM</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">jlist</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
    <span class="k">for</span> <span class="n">n2</span> <span class="ow">in</span> <span class="n">unknown</span><span class="p">:</span>
        <span class="n">h</span> <span class="o">+=</span> <span class="n">hLM</span><span class="o">.</span><span class="n">perplexity</span><span class="p">(</span><span class="n">docs</span><span class="p">[</span><span class="n">n2</span><span class="p">])</span>
        <span class="n">m</span> <span class="o">+=</span> <span class="n">mLM</span><span class="o">.</span><span class="n">perplexity</span><span class="p">(</span><span class="n">docs</span><span class="p">[</span><span class="n">n2</span><span class="p">])</span>
        <span class="n">j</span> <span class="o">+=</span> <span class="n">jLM</span><span class="o">.</span><span class="n">perplexity</span><span class="p">(</span><span class="n">docs</span><span class="p">[</span><span class="n">n2</span><span class="p">])</span>
    
    <span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">unknown</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">m</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">unknown</span><span class="p">)</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">unknown</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>

<span class="n">mean_perplexity</span><span class="p">(</span><span class="n">papers_content</span><span class="p">,</span> <span class="n">authors</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(1941.3851677346731, 1796.913703659331, 2027.895787270102)</pre>
</div>

</div>

</div>
</div>

</div>

</body>







</html>
