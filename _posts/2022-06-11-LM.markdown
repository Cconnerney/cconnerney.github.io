---
layout: post
title: Multilingual RNN Sentiment Classifier
description: N-gram language model, sentence generation, and text analysis
img: lm.jpg # Add image post (optional)
tags: [NLP, Ngram]
---

<html>
<head><meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>LM</title><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>

<style type="text/css">
  pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.highlight .hll { background-color: #ffffcc }
.highlight { background: #f8f8f8; }
.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #9C6500 } /* Comment.Preproc */
.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */
.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #E40000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #008400 } /* Generic.Inserted */
.highlight .go { color: #717171 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #687822 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #767600 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #666666 } /* Literal.Number.Bin */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sa { color: #BA2121 } /* Literal.String.Affix */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #A45A77 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #0000FF } /* Name.Function.Magic */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .vm { color: #19177C } /* Name.Variable.Magic */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

<!-- Load mathjax -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"> </script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    init_mathjax = function() {
        if (window.MathJax) {
        // MathJax loaded
            MathJax.Hub.Config({
                TeX: {
                    equationNumbers: {
                    autoNumber: "AMS",
                    useLabelIds: true
                    }
                },
                tex2jax: {
                    inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                    displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
                    processEscapes: true,
                    processEnvironments: true
                },
                displayAlign: 'center',
                CommonHTML: {
                    linebreaks: {
                    automatic: true
                    }
                }
            });

            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
    }
    init_mathjax();
    </script>
    <!-- End of mathjax configuration --></head>
<body>

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Language-Models">Language Models<a class="anchor-link" href="#Language-Models">&#182;</a></h2><p>N-gram language model, sentence generation, and text analysis</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">product</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">from</span> <span class="nn">utils</span> <span class="kn">import</span> <span class="o">*</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Sentence START symbol: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">START</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Sentence END symbol: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">EOS</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Unknown token symbol: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">UNK</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Sentence START symbol: &lt;s&gt;
Sentence END symbol: &lt;/s&gt;
Unknown token symbol: &lt;UNK&gt;
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sample</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="s2">&quot;sample.txt&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[&#39;We are never ever ever ever ever getting back together\n&#39;, &#39;We are the ones together we are back&#39;]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sample</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">sample</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[[&#39;&lt;s&gt;&#39;, &#39;we&#39;, &#39;are&#39;, &#39;never&#39;, &#39;ever&#39;, &#39;ever&#39;, &#39;ever&#39;, &#39;ever&#39;, &#39;getting&#39;, &#39;back&#39;, &#39;together&#39;, &#39;&lt;/s&gt;&#39;], [&#39;&lt;s&gt;&#39;, &#39;we&#39;, &#39;are&#39;, &#39;the&#39;, &#39;ones&#39;, &#39;together&#39;, &#39;we&#39;, &#39;are&#39;, &#39;back&#39;, &#39;&lt;/s&gt;&#39;]]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">lst</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">flatten</span><span class="p">([[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s2">&quot;d&quot;</span><span class="p">]]))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">change_to_unk</span><span class="p">(</span><span class="n">preprocessed_sentences</span><span class="p">,</span> <span class="n">min_freq</span><span class="p">,</span> <span class="n">train_vocab</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>

    <span class="n">final</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nb">dict</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">if</span> <span class="n">train_vocab</span> <span class="o">!=</span> <span class="kc">None</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">preprocessed_sentences</span><span class="p">:</span>
            <span class="n">newlist</span> <span class="o">=</span> <span class="n">line</span>
            <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">train_vocab</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">min_freq</span><span class="p">:</span>
                    <span class="n">newlist</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="s1">&#39;&lt;UNK&gt;&#39;</span>
            <span class="n">final</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">preprocessed_sentences</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">:</span>
                    <span class="nb">dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="nb">dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">preprocessed_sentences</span><span class="p">:</span>
            <span class="n">newlist</span> <span class="o">=</span> <span class="n">line</span>
            <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
                <span class="k">if</span> <span class="nb">dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">min_freq</span><span class="p">:</span>
                    <span class="n">newlist</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="s1">&#39;&lt;UNK&gt;&#39;</span>
            <span class="n">final</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">newlist</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">final</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sample</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;never&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;getting&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;ones&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">]]</span>
<span class="nb">print</span><span class="p">((</span><span class="n">change_to_unk</span><span class="p">(</span><span class="n">sample</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="k">assert</span><span class="p">(</span><span class="n">change_to_unk</span><span class="p">(</span><span class="n">sample</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="o">==</span> <span class="p">[[</span><span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">]]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[[&#39;&lt;UNK&gt;&#39;, &#39;we&#39;, &#39;are&#39;, &#39;&lt;UNK&gt;&#39;, &#39;ever&#39;, &#39;ever&#39;, &#39;ever&#39;, &#39;ever&#39;, &#39;&lt;UNK&gt;&#39;, &#39;&lt;UNK&gt;&#39;, &#39;&lt;UNK&gt;&#39;, &#39;&lt;UNK&gt;&#39;], [&#39;&lt;UNK&gt;&#39;, &#39;we&#39;, &#39;are&#39;, &#39;&lt;UNK&gt;&#39;, &#39;&lt;UNK&gt;&#39;, &#39;&lt;UNK&gt;&#39;, &#39;we&#39;, &#39;are&#39;, &#39;&lt;UNK&gt;&#39;, &#39;&lt;UNK&gt;&#39;]]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">get_ngrams</span><span class="p">(</span><span class="n">list_of_words</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>

    <span class="n">n_grams</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">l</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">list_of_words</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> <span class="c1">#tri-gram</span>
            <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">tup</span> <span class="o">=</span> <span class="p">(</span><span class="n">list_of_words</span><span class="p">[</span><span class="n">l</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="n">list_of_words</span><span class="p">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">list_of_words</span><span class="p">[</span><span class="n">l</span><span class="p">])</span>
                <span class="n">n_grams</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tup</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span> <span class="c1">#bi-gram</span>
            <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">tup</span> <span class="o">=</span> <span class="p">(</span><span class="n">list_of_words</span><span class="p">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">list_of_words</span><span class="p">[</span><span class="n">l</span><span class="p">])</span>
                <span class="n">n_grams</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tup</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c1">#uni-gram</span>
            <span class="n">tup</span> <span class="o">=</span> <span class="p">(</span><span class="n">list_of_words</span><span class="p">[</span><span class="n">l</span><span class="p">],)</span>
            <span class="n">n_grams</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tup</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">n_grams</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sample</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;never&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;getting&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;ones&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">]]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">get_ngrams</span><span class="p">(</span><span class="n">flatten</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">assert</span> <span class="n">get_ngrams</span><span class="p">(</span><span class="n">flatten</span><span class="p">(</span><span class="n">sample</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="p">[(</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;never&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;never&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;never&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;getting&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;getting&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;getting&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;the&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;ones&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;ones&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;ones&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">)]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[(&#39;&lt;s&gt;&#39;,), (&#39;we&#39;,), (&#39;are&#39;,), (&#39;never&#39;,), (&#39;ever&#39;,), (&#39;ever&#39;,), (&#39;ever&#39;,), (&#39;ever&#39;,), (&#39;getting&#39;,), (&#39;back&#39;,), (&#39;together&#39;,), (&#39;&lt;/s&gt;&#39;,), (&#39;&lt;s&gt;&#39;,), (&#39;we&#39;,), (&#39;are&#39;,), (&#39;the&#39;,), (&#39;ones&#39;,), (&#39;together&#39;,), (&#39;we&#39;,), (&#39;are&#39;,), (&#39;back&#39;,), (&#39;&lt;/s&gt;&#39;,)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">class</span> <span class="nc">LanguageModel</span><span class="p">():</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">train_data</span><span class="p">,</span> <span class="n">smoothing</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">train_data</span> <span class="o">=</span> <span class="n">train_data</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tokens</span> <span class="o">=</span> <span class="n">flatten</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">train_data</span><span class="p">)</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">vocab</span>  <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tokens</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">smoothing</span> <span class="o">=</span> <span class="n">smoothing</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">model</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">build</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="n">n_gram</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">grams</span> <span class="o">=</span> <span class="n">get_ngrams</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tokens</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">grams</span><span class="p">)</span>

        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">smoothing</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span><span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">product</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tokens</span><span class="p">,</span><span class="n">repeat</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">n</span><span class="p">)}</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
                <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">temp</span>

        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">vocab</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">vocab</span><span class="p">:</span>
                <span class="n">n_gram</span><span class="p">[(</span><span class="n">i</span><span class="p">,)]</span><span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">vocab</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">total</span>
        
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">c1</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">grams</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
                <span class="n">n_gram</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="n">c1</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">smoothing</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">vocab</span><span class="p">))</span>
            
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">c1</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">((</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">grams</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
                <span class="n">n_gram</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="n">c1</span><span class="p">[(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">])]</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">smoothing</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">vocab</span><span class="p">))</span>

        <span class="k">return</span> <span class="n">n_gram</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="n">test_lm</span><span class="o">.</span><span class="n">model</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">test_lm</span><span class="o">.</span><span class="n">model</span> <span class="o">==</span> <span class="p">{(</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">):</span> <span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">):</span> <span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;never&#39;</span><span class="p">):</span> <span class="mf">0.3333333333333333</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;never&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">):</span> <span class="mf">1.0</span><span class="p">,(</span><span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">):</span> <span class="mf">0.75</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;getting&#39;</span><span class="p">):</span> <span class="mf">0.25</span><span class="p">,(</span><span class="s1">&#39;getting&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">):</span> <span class="mf">1.0</span><span class="p">,(</span><span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">):</span> <span class="mf">0.5</span><span class="p">,(</span><span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">):</span> <span class="mf">0.5</span><span class="p">,(</span><span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">):</span> <span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;the&#39;</span><span class="p">):</span> <span class="mf">0.3333333333333333</span><span class="p">,(</span><span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;ones&#39;</span><span class="p">):</span> <span class="mf">1.0</span><span class="p">,(</span><span class="s1">&#39;ones&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">):</span> <span class="mf">1.0</span><span class="p">,(</span><span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">):</span> <span class="mf">0.5</span><span class="p">,(</span><span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">):</span> <span class="mf">0.3333333333333333</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">):</span> <span class="mf">0.5</span><span class="p">}</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>{(&#39;&lt;s&gt;&#39;, &#39;we&#39;): 1.0, (&#39;we&#39;, &#39;are&#39;): 1.0, (&#39;are&#39;, &#39;never&#39;): 0.3333333333333333, (&#39;never&#39;, &#39;ever&#39;): 1.0, (&#39;ever&#39;, &#39;ever&#39;): 0.75, (&#39;ever&#39;, &#39;getting&#39;): 0.25, (&#39;getting&#39;, &#39;back&#39;): 1.0, (&#39;back&#39;, &#39;together&#39;): 0.5, (&#39;together&#39;, &#39;&lt;/s&gt;&#39;): 0.5, (&#39;&lt;/s&gt;&#39;, &#39;&lt;s&gt;&#39;): 1.0, (&#39;are&#39;, &#39;the&#39;): 0.3333333333333333, (&#39;the&#39;, &#39;ones&#39;): 1.0, (&#39;ones&#39;, &#39;together&#39;): 1.0, (&#39;together&#39;, &#39;we&#39;): 0.5, (&#39;are&#39;, &#39;back&#39;): 0.3333333333333333, (&#39;back&#39;, &#39;&lt;/s&gt;&#39;): 0.5}
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">perplexity</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">test_data</span><span class="p">):</span>
    
    <span class="n">unk</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">lm</span><span class="o">.</span><span class="n">vocab</span><span class="p">)</span>
    <span class="n">grams</span> <span class="o">=</span> <span class="n">get_ngrams</span><span class="p">(</span><span class="n">flatten</span><span class="p">(</span><span class="n">unk</span><span class="p">),</span><span class="n">lm</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>

    <span class="n">up</span> <span class="o">=</span> <span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">vocab</span><span class="p">[</span><span class="s1">&#39;&lt;UNK&gt;&#39;</span><span class="p">]</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">tokens</span><span class="p">))</span>
    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">grams</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lm</span><span class="o">.</span><span class="n">model</span><span class="p">:</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">model</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">up</span><span class="p">))</span>
    
    <span class="n">temp</span> <span class="o">=</span> <span class="n">s</span><span class="o">*</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">grams</span><span class="p">)))</span>

    <span class="n">pp</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grams</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">pp</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># test</span>
<span class="n">sample</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;never&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;ever&#39;</span><span class="p">,</span> <span class="s1">&#39;getting&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;ones&#39;</span><span class="p">,</span> <span class="s1">&#39;together&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;back&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">]]</span>
<span class="n">test_lm</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">train_data</span><span class="o">=</span><span class="n">sample</span><span class="p">,</span> <span class="n">smoothing</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">test_ppl</span> <span class="o">=</span> <span class="n">perplexity</span><span class="p">(</span><span class="n">test_lm</span><span class="p">,</span> <span class="n">sample</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">test_ppl</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>21
5.283124177782942
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">train_path</span> <span class="o">=</span> <span class="s2">&quot;tech.txt&quot;</span>
<span class="n">test_path</span> <span class="o">=</span> <span class="s2">&quot;sport.txt&quot;</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">min_freq</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">smoothing</span> <span class="o">=</span> <span class="mi">0</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">train</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="n">train_path</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="n">test_path</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No of sentences in train file: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">train</span><span class="p">)))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No of sentences in test file: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="p">)))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>No of sentences in train file: 10365
No of sentences in test file: 9611
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Raw train example: </span><span class="se">\n</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Raw test example: </span><span class="se">\n</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Raw train example: 
This new technology is causing both worries and guarded optimism among different sectors of the population

Raw test example: 
The 25 year old has already smashed the British record over 60m hurdles twice this season setting a new mark of 7

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">train</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Preprocessed train example: </span><span class="se">\n</span><span class="si">{}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Preprocessed test example: </span><span class="se">\n</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Preprocessed train example: 
[&#39;&lt;s&gt;&#39;, &#39;&lt;s&gt;&#39;, &#39;this&#39;, &#39;new&#39;, &#39;technology&#39;, &#39;is&#39;, &#39;causing&#39;, &#39;both&#39;, &#39;worries&#39;, &#39;and&#39;, &#39;guarded&#39;, &#39;optimism&#39;, &#39;among&#39;, &#39;different&#39;, &#39;sectors&#39;, &#39;of&#39;, &#39;the&#39;, &#39;population&#39;, &#39;&lt;/s&gt;&#39;]

Preprocessed test example: 
[&#39;&lt;s&gt;&#39;, &#39;&lt;s&gt;&#39;, &#39;the&#39;, &#39;25&#39;, &#39;year&#39;, &#39;old&#39;, &#39;has&#39;, &#39;already&#39;, &#39;smashed&#39;, &#39;the&#39;, &#39;british&#39;, &#39;record&#39;, &#39;over&#39;, &#39;60m&#39;, &#39;hurdles&#39;, &#39;twice&#39;, &#39;this&#39;, &#39;season&#39;, &#39;setting&#39;, &#39;a&#39;, &#39;new&#39;, &#39;mark&#39;, &#39;of&#39;, &#39;7&#39;, &#39;&lt;/s&gt;&#39;]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Change train tokens to UNK whenever freq &lt; min_freq</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">min_freq</span><span class="p">)</span>

<span class="c1"># Change test tokens to UNK whenever test word OOV (not present in train_vocab)</span>
<span class="n">train_vocab</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">flatten</span><span class="p">(</span><span class="n">train</span><span class="p">))</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">min_freq</span><span class="p">,</span> <span class="n">train_vocab</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;After &lt;UNK&gt; replacement train example: </span><span class="se">\n</span><span class="si">{}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;After &lt;UNK&gt; replacement test example: </span><span class="se">\n</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>After &lt;UNK&gt; replacement train example: 
[&#39;&lt;s&gt;&#39;, &#39;&lt;s&gt;&#39;, &#39;this&#39;, &#39;new&#39;, &#39;technology&#39;, &#39;is&#39;, &#39;causing&#39;, &#39;both&#39;, &#39;worries&#39;, &#39;and&#39;, &#39;&lt;UNK&gt;&#39;, &#39;&lt;UNK&gt;&#39;, &#39;among&#39;, &#39;different&#39;, &#39;sectors&#39;, &#39;of&#39;, &#39;the&#39;, &#39;population&#39;, &#39;&lt;/s&gt;&#39;]

After &lt;UNK&gt; replacement test example: 
[&#39;&lt;s&gt;&#39;, &#39;&lt;s&gt;&#39;, &#39;the&#39;, &#39;25&#39;, &#39;year&#39;, &#39;old&#39;, &#39;has&#39;, &#39;already&#39;, &#39;smashed&#39;, &#39;the&#39;, &#39;british&#39;, &#39;record&#39;, &#39;over&#39;, &#39;&lt;UNK&gt;&#39;, &#39;hurdles&#39;, &#39;twice&#39;, &#39;this&#39;, &#39;season&#39;, &#39;setting&#39;, &#39;a&#39;, &#39;new&#39;, &#39;mark&#39;, &#39;of&#39;, &#39;7&#39;, &#39;&lt;/s&gt;&#39;]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Loading </span><span class="si">{}</span><span class="s2">-gram model.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
<span class="n">lm</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="n">smoothing</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Vocabulary size (unique unigrams): </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">vocab</span><span class="p">)))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Total number of unique n-grams: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">model</span><span class="p">)))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Loading 3-gram model.
Vocabulary size (unique unigrams): 8057
Total number of unique n-grams: 143348
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Calculate perplexity</span>

<span class="n">ppl</span> <span class="o">=</span> <span class="n">perplexity</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">test</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Model perplexity: </span><span class="si">{:.3f}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ppl</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>203241
Model perplexity: 31.612
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">random</span>

<span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">11411</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">best_candidate</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">prev</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">without</span><span class="o">=</span><span class="p">[],</span> <span class="n">mode</span><span class="o">=</span><span class="s2">&quot;random&quot;</span><span class="p">):</span>
    
    <span class="c1"># Returns the most probable word candidate after a given sentence.</span>
    <span class="n">blacklist</span>  <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;&lt;UNK&gt;&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="n">without</span>
    <span class="n">candidates</span> <span class="o">=</span> <span class="p">((</span><span class="n">ngram</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">prob</span><span class="p">)</span> <span class="k">for</span> <span class="n">ngram</span><span class="p">,</span><span class="n">prob</span> <span class="ow">in</span> <span class="n">lm</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">ngram</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">prev</span><span class="p">)</span>
    <span class="n">candidates</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">candidate</span><span class="p">:</span> <span class="n">candidate</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">blacklist</span><span class="p">,</span> <span class="n">candidates</span><span class="p">)</span>
    <span class="n">candidates</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">candidate</span><span class="p">:</span> <span class="n">candidate</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">candidates</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">(</span><span class="s2">&quot;&lt;/s&gt;&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span><span class="p">(</span><span class="n">mode</span><span class="o">==</span><span class="s2">&quot;random&quot;</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">candidates</span><span class="p">[</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">candidates</span><span class="p">))]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">candidates</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">top_k_best_candidates</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">prev</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">without</span><span class="o">=</span><span class="p">[]):</span>

    <span class="c1"># Returns the K most-probable word candidate after a given n-1 gram.</span>

    <span class="n">blacklist</span>  <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;&lt;UNK&gt;&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="n">without</span>
    <span class="n">candidates</span> <span class="o">=</span> <span class="p">((</span><span class="n">ngram</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">prob</span><span class="p">)</span> <span class="k">for</span> <span class="n">ngram</span><span class="p">,</span><span class="n">prob</span> <span class="ow">in</span> <span class="n">lm</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">ngram</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">prev</span><span class="p">)</span>
    <span class="n">candidates</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">candidate</span><span class="p">:</span> <span class="n">candidate</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">blacklist</span><span class="p">,</span> <span class="n">candidates</span><span class="p">)</span>
    <span class="n">candidates</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">candidate</span><span class="p">:</span> <span class="n">candidate</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">candidates</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">(</span><span class="s2">&quot;&lt;/s&gt;&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">candidates</span><span class="p">[:</span><span class="n">k</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">generate_sentences_from_phrase</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">sent</span><span class="p">,</span> <span class="n">prob</span><span class="p">,</span> <span class="n">mode</span><span class="p">):</span>

    <span class="c1"># Generate sentences using the trained language model.</span>

    <span class="n">min_len</span><span class="o">=</span><span class="mi">12</span>
    <span class="n">max_len</span><span class="o">=</span><span class="mi">24</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
        <span class="k">while</span> <span class="n">sent</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&quot;&lt;/s&gt;&quot;</span><span class="p">:</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="p">()</span> <span class="k">if</span> <span class="n">lm</span><span class="o">.</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">sent</span><span class="p">[</span><span class="o">-</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):])</span>
            <span class="n">blacklist</span> <span class="o">=</span> <span class="n">sent</span> <span class="o">+</span> <span class="p">([</span><span class="s2">&quot;&lt;/s&gt;&quot;</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sent</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">min_len</span> <span class="k">else</span> <span class="p">[])</span>

            <span class="n">next_token</span><span class="p">,</span> <span class="n">next_prob</span> <span class="o">=</span> <span class="n">best_candidate</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">prev</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">without</span><span class="o">=</span><span class="n">blacklist</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="n">mode</span><span class="p">)</span>
            <span class="n">sent</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">next_token</span><span class="p">)</span>
            <span class="n">prob</span> <span class="o">*=</span> <span class="n">next_prob</span>
            
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sent</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_len</span><span class="p">:</span>
                <span class="n">sent</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&quot;&lt;/s&gt;&quot;</span><span class="p">)</span>

        <span class="k">yield</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sent</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">prob</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">train_path</span> <span class="o">=</span> <span class="s1">&#39;/Users/cristinconnerney/Desktop/NLP hw 3/data/bbc/tech-small.txt&#39;</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="n">train_path</span><span class="p">)</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">lm</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">train_data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">smoothing</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Total number of unique n-grams: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">model</span><span class="p">)))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Total number of unique n-grams: 19881
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">smoothing</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">min_freq</span> <span class="o">=</span> <span class="mi">1</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">train</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="s1">&#39;entertainment.txt&#39;</span><span class="p">)</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">min_freq</span><span class="p">)</span>
<span class="n">lm</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="n">smoothing</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">perplexity</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span><span class="n">train</span><span class="p">))</span>
<span class="c1">#2.474891563852322</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>152322
3.626167335957787
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">s1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="p">)</span>
<span class="n">s2</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;starred&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">)</span>
<span class="n">s3</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;actor&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">top_k_best_candidates</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">s3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">without</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;&lt;s&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;/s&gt;&#39;</span><span class="p">]))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[(&#39;a&#39;, 0.8571428571428571), (&#39;2004&#39;, 0.14285714285714285)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Random</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">generate_sentences_from_phrase</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;&lt;s&gt;&quot;</span><span class="p">,</span> <span class="s2">&quot;&lt;s&gt;&quot;</span><span class="p">,</span> <span class="s2">&quot;starred&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">],</span> <span class="mf">0.2</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s2">&quot;max&quot;</span><span class="p">)))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[(&#39;&lt;s&gt; &lt;s&gt; starred in the us and europe &lt;/s&gt;&#39;, 0.10440413008566475)]
[(&#39;&lt;s&gt; &lt;s&gt; starred in the us and europe &lt;/s&gt;&#39;, 0.10440413008566475)]
[(&#39;&lt;s&gt; &lt;s&gt; starred in the us and europe &lt;/s&gt;&#39;, 0.10440413008566475)]
[(&#39;&lt;s&gt; &lt;s&gt; starred in the us and europe &lt;/s&gt;&#39;, 0.10440413008566475)]
[(&#39;&lt;s&gt; &lt;s&gt; starred in the us and europe &lt;/s&gt;&#39;, 0.10440413008566475)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Calculate your n-gram model&#39;s perplexity</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">smoothing</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">min_freq</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">train</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="s1">&#39;entertainment.txt&#39;</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="s1">&#39;tech-small.txt&#39;</span><span class="p">)</span>

<span class="n">train</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">min_freq</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">min_freq</span><span class="p">,</span> <span class="n">Counter</span><span class="p">(</span><span class="n">flatten</span><span class="p">(</span><span class="n">train</span><span class="p">)))</span>
<span class="n">lm</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="n">smoothing</span><span class="p">)</span>
<span class="n">ppl</span> <span class="o">=</span> <span class="n">perplexity</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">test</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;ppl&quot;</span><span class="p">,</span><span class="n">ppl</span><span class="p">)</span>
<span class="c1"># 19.993733</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>1150
ppl 19.993733016106667
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="My-model-VS-GPT2">My model VS GPT2<a class="anchor-link" href="#My-model-VS-GPT2">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">!</span>pip install transformers
<span class="o">!</span>pip install torch
<span class="o">!</span>pip install tqdm
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">GPT2LMHeadModel</span><span class="p">,</span> <span class="n">GPT2TokenizerFast</span>
<span class="kn">import</span> <span class="nn">torch</span>

<span class="n">model_id</span> <span class="o">=</span> <span class="s2">&quot;distilgpt2&quot;</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">GPT2LMHeadModel</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">GPT2TokenizerFast</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_id</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stderr output_text">
<pre>Downloading: 100%|██████████| 762/762 [00:00&lt;00:00, 194kB/s]
Downloading: 100%|██████████| 336M/336M [00:15&lt;00:00, 23.1MB/s]
Downloading: 100%|██████████| 0.99M/0.99M [00:00&lt;00:00, 4.69MB/s]
Downloading: 100%|██████████| 446k/446k [00:00&lt;00:00, 2.76MB/s]
Downloading: 100%|██████████| 1.29M/1.29M [00:00&lt;00:00, 3.61MB/s]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">test</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="s1">&#39;/Users/cristinconnerney/Desktop/NLP hw 3/data/bbc/tech-small.txt&#39;</span><span class="p">)</span>
<span class="n">encodings</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">test</span><span class="p">),</span> <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&quot;pt&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="n">max_length</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">n_positions</span>
<span class="n">stride</span> <span class="o">=</span> <span class="mi">100</span>

<span class="n">nlls</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">encodings</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">stride</span><span class="p">)):</span>
    <span class="n">begin_loc</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">stride</span> <span class="o">-</span> <span class="n">max_length</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">end_loc</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">stride</span><span class="p">,</span> <span class="n">encodings</span><span class="o">.</span><span class="n">input_ids</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">trg_len</span> <span class="o">=</span> <span class="n">end_loc</span> <span class="o">-</span> <span class="n">i</span>  <span class="c1"># may be different from stride on last loop</span>
    <span class="n">input_ids</span> <span class="o">=</span> <span class="n">encodings</span><span class="o">.</span><span class="n">input_ids</span><span class="p">[:,</span> <span class="n">begin_loc</span><span class="p">:</span><span class="n">end_loc</span><span class="p">]</span>
    <span class="n">target_ids</span> <span class="o">=</span> <span class="n">input_ids</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>
    <span class="n">target_ids</span><span class="p">[:,</span> <span class="p">:</span><span class="o">-</span><span class="n">trg_len</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span>

    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
        <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">target_ids</span><span class="p">)</span>
        <span class="n">neg_log_likelihood</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">trg_len</span>

    <span class="n">nlls</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">neg_log_likelihood</span><span class="p">)</span>

<span class="n">ppl</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">stack</span><span class="p">(</span><span class="n">nlls</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">end_loc</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stderr output_text">
<pre>100%|██████████| 12/12 [00:18&lt;00:00,  1.53s/it]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Perplexity using GPT2:&quot;</span><span class="p">,</span> <span class="n">ppl</span><span class="o">.</span><span class="n">item</span><span class="p">())</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Perplexity using GPT2: 50.5692253112793
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Other-Files-used:-main.py">Other Files used: main.py<a class="anchor-link" href="#Other-Files-used:-main.py">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">utils</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">lm</span> <span class="kn">import</span> <span class="o">*</span>
        
<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>

    <span class="n">train</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">train</span><span class="p">)</span>
    <span class="n">test</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">test</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No of sentences in train file: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">train</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;No of sentences in test file: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Raw train example: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Raw test example: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>

    <span class="c1"># Preprocessing</span>
    <span class="n">train</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>
    <span class="n">test</span> <span class="o">=</span> <span class="n">preprocess</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Preprocessed train example: </span><span class="se">\n</span><span class="si">{}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Preprocessed test example: </span><span class="se">\n</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>

    <span class="c1"># Change train tokens to UNK whenever freq &lt; min_freq</span>
    <span class="n">train</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">min_freq</span><span class="p">)</span>
    <span class="c1"># Change test tokens to UNK whenever test word OOV (not present in train_vocab)</span>
    <span class="n">train_vocab</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">flatten</span><span class="p">(</span><span class="n">train</span><span class="p">))</span>
    <span class="n">test</span> <span class="o">=</span> <span class="n">change_to_unk</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">min_freq</span><span class="p">,</span> <span class="n">train_vocab</span><span class="p">)</span>

    <span class="c1"># Language Model</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Loading </span><span class="si">{}</span><span class="s2">-gram model.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">n</span><span class="p">))</span>
    <span class="n">lm</span> <span class="o">=</span> <span class="n">LanguageModel</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">n</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">smoothing</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Vocabulary size (unique unigrams): </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">vocab</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Total number of unique n-grams: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">model</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>

    <span class="c1"># Perplexity</span>
    <span class="n">ppl</span> <span class="o">=</span> <span class="n">perplexity</span><span class="p">(</span><span class="n">lm</span><span class="o">=</span><span class="n">lm</span><span class="p">,</span> <span class="n">test_data</span><span class="o">=</span><span class="n">test</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Model perplexity: </span><span class="si">{:.3f}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ppl</span><span class="p">))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>

    <span class="c1"># Sentence Completion </span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Generating random sentences.&quot;</span><span class="p">)</span>
    <span class="n">num_to_generate</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="k">for</span> <span class="n">sentence</span><span class="p">,</span> <span class="n">prob</span> <span class="ow">in</span> <span class="n">generate_sentences</span><span class="p">(</span><span class="n">lm</span><span class="p">,</span> <span class="n">num_to_generate</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">{}</span><span class="s2"> (</span><span class="si">{:.5f}</span><span class="s2">)&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sentence</span><span class="p">,</span> <span class="n">prob</span><span class="p">))</span>
        
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;--------------------------------------------------&quot;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="s2">&quot;Your n-gram language model.&quot;</span><span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--train&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
            <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Location of train file (.txt format)&#39;</span><span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--test&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
            <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Location of test file (.txt format)&#39;</span><span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--n&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
            <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Order of n-gram model to create (i.e. 1 for unigram, 2 for bigram, etc.)&#39;</span><span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--smoothing&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Flag for performing laplace smoothing or not.&#39;</span><span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--min_freq&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Min freq threshold for every word. Replace with &lt;UNK&gt; if freq &lt; min_freq.&#39;</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
    <span class="n">main</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Other-Files-used:-utils.py">Other Files used: utils.py<a class="anchor-link" href="#Other-Files-used:-utils.py">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pdb</span>

<span class="n">START</span> <span class="o">=</span> <span class="s2">&quot;&lt;s&gt;&quot;</span>
<span class="n">EOS</span> <span class="o">=</span> <span class="s2">&quot;&lt;/s&gt;&quot;</span>
<span class="n">UNK</span> <span class="o">=</span> <span class="s2">&quot;&lt;UNK&gt;&quot;</span>

<span class="k">def</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>

    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">text</span>

<span class="k">def</span> <span class="nf">preprocess</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>

    <span class="n">sentences</span> <span class="o">=</span> <span class="n">add_special_tokens</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

    <span class="n">preprocessed_sentences</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sentences</span><span class="p">:</span>
        <span class="n">preprocessed_sentences</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">tok</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">tok</span> <span class="ow">in</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()])</span>
    
    <span class="k">return</span> <span class="n">preprocessed_sentences</span>

<span class="k">def</span> <span class="nf">add_special_tokens</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="n">ngram</span><span class="p">):</span>
    <span class="n">num_of_start_tokens</span> <span class="o">=</span> <span class="n">ngram</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">ngram</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">1</span>
    <span class="n">start_tokens</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">START</span><span class="p">]</span> <span class="o">*</span> <span class="n">num_of_start_tokens</span><span class="p">)</span>
    <span class="n">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> </span><span class="si">{}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">start_tokens</span><span class="p">,</span> <span class="n">sent</span><span class="p">,</span> <span class="n">EOS</span><span class="p">)</span> <span class="k">for</span> <span class="n">sent</span> <span class="ow">in</span> <span class="n">sentences</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">sentences</span>
</pre></div>

    </div>
</div>
</div>

</div>

</body>







</html>
