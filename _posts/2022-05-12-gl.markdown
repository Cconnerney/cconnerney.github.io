---
layout: post
title: Dijsktra and PageRank
description: This graphing library uses both the adjacency dictionary and the sparse adjacency matrix representation of a graph.  Using these two representations, it implements two of the more well-known large-scale graph processing algorithms.
img: dij.jpg # Add image post (optional)
tags: [Dijsktra, PageRank]
---

<html>
<head><meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>gl</title><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
  

<!-- Load mathjax -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"> </script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    init_mathjax = function() {
        if (window.MathJax) {
        // MathJax loaded
            MathJax.Hub.Config({
                TeX: {
                    equationNumbers: {
                    autoNumber: "AMS",
                    useLabelIds: true
                    }
                },
                tex2jax: {
                    inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                    displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
                    processEscapes: true,
                    processEnvironments: true
                },
                displayAlign: 'center',
                CommonHTML: {
                    linebreaks: {
                    automatic: true
                    }
                }
            });

            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
    }
    init_mathjax();
    </script>
    <!-- End of mathjax configuration --></head>
<body>
  <div tabindex="-1" id="notebook" class="border-box-sizing">
    <div class="container" id="notebook-container">

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="Graph-Library">Graph Library<a class="anchor-link" href="#Graph-Library">&#182;</a></h1><p>This graphing library uses both the adjacency dictionary and the sparse adjacency matrix representation of a graph.  Using these two representations, it implements two of the more well-known large-scale graph processing algorithms: Dijkstra's algorithm for finding single-source shortest paths in the graph, and the PageRank algorithm for determining the importance of nodes in the network.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">scipy.sparse</span> <span class="k">as</span> <span class="nn">sp</span>
<span class="kn">import</span> <span class="nn">heapdict</span>
<span class="kn">import</span> <span class="nn">mugrade</span>
<span class="kn">import</span> <span class="nn">gzip</span>

<span class="c1"># Utility function to read the graph</span>
<span class="k">def</span> <span class="nf">read_graph</span><span class="p">(</span><span class="n">basename</span><span class="o">=</span><span class="s2">&quot;wikipedia_small&quot;</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">gzip</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">basename</span><span class="si">}</span><span class="s2">.nodes.gz&quot;</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
    <span class="k">with</span> <span class="n">gzip</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">basename</span><span class="si">}</span><span class="s2">.graph.gz&quot;</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">links</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
            <span class="n">links</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">nodes</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)],</span> <span class="n">nodes</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">j</span><span class="p">)]))</span>
    <span class="k">return</span> <span class="n">links</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">class</span> <span class="nc">Graph</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">edges</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">add_edges</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">edges_list</span><span class="p">):</span>

        <span class="n">flat</span> <span class="o">=</span> <span class="p">{</span><span class="n">item</span><span class="p">:{}</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">edges_list</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">}</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">edges_list</span><span class="p">:</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">flat</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
            <span class="n">temp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="n">flat</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{</span><span class="n">item</span><span class="p">:</span><span class="mi">1</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">temp</span><span class="p">}</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">edges</span><span class="o">=</span> <span class="n">flat</span>
        <span class="k">return</span> <span class="bp">self</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">shortest_path</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>

    <span class="n">h</span> <span class="o">=</span> <span class="n">heapdict</span><span class="o">.</span><span class="n">heapdict</span><span class="p">()</span>

    <span class="n">final</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">source</span><span class="p">:</span>
            <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="kc">None</span><span class="p">)</span>
            <span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="kc">None</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">),</span><span class="kc">None</span><span class="p">)</span>
            <span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">),</span><span class="kc">None</span><span class="p">)</span>

    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">let</span><span class="p">,</span><span class="n">dist</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>

        <span class="n">nodes</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="n">let</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
            <span class="n">new</span> <span class="o">=</span> <span class="n">final</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">dist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">new</span><span class="p">:</span>
                <span class="n">final</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">let</span><span class="p">)</span>
                <span class="n">h</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">let</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">final</span>

<span class="n">wikipedia_edges</span> <span class="o">=</span> <span class="n">read_graph</span><span class="p">()</span>
<span class="n">wikipedia_graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">()</span><span class="o">.</span><span class="n">add_edges</span><span class="p">(</span><span class="n">wikipedia_edges</span><span class="p">)</span>
<span class="n">shortest_paths_cmu</span> <span class="o">=</span> <span class="n">shortest_path</span><span class="p">(</span><span class="n">wikipedia_graph</span><span class="p">,</span> <span class="s2">&quot;Carnegie_Mellon_University&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">shortest_paths_cmu</span><span class="p">[</span><span class="s2">&quot;List_of_Salticidae_species&quot;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">shortest_paths_cmu</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">)))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>(5, &#39;Jumping_spider&#39;)
5
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">adjacency_matrix</span><span class="p">(</span><span class="n">g</span><span class="p">):</span>

    <span class="n">m</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="o">.</span><span class="n">keys</span><span class="p">()),</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="o">.</span><span class="n">keys</span><span class="p">()))))</span>

    <span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">vals</span> <span class="ow">in</span> <span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">vals</span><span class="p">:</span>
            <span class="n">rows</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">])</span>
            <span class="n">cols</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">key</span><span class="p">])</span>
            <span class="n">values</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">spm</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">coo_matrix</span><span class="p">((</span><span class="n">values</span><span class="p">,</span> <span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">)))</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">spm</span><span class="p">,</span><span class="n">m</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">((</span><span class="k">lambda</span> <span class="n">g</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="n">M</span><span class="o">.</span><span class="n">tocsr</span><span class="p">()[</span><span class="nb">len</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s2">&quot;Carnegie_Mellon_University&quot;</span><span class="p">])</span><span class="o">*</span><span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot;Carnegie_Mellon_University&quot;</span><span class="p">)],[</span><span class="nb">list</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s2">&quot;Carnegie_Mellon_University&quot;</span><span class="p">])]])(</span><span class="o">*</span><span class="p">(</span><span class="k">lambda</span> <span class="n">g</span> <span class="p">:</span> <span class="p">(</span><span class="n">g</span><span class="p">,)</span> <span class="o">+</span> <span class="n">adjacency_matrix</span><span class="p">(</span><span class="n">g</span><span class="p">))(</span><span class="n">wikipedia_graph</span><span class="p">)))[</span><span class="mi">0</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">adjacency_matrix</span><span class="p">(</span><span class="n">wikipedia_graph</span><span class="p">)[</span><span class="mi">1</span><span class="p">]))[</span><span class="mi">40</span><span class="p">:</span><span class="mi">50</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0
 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1
 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 1 1 0 1 1 1 0 1 0
 0 1 1 1 0 1 1 0 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 0 0 1 0 1 0 0 1]
[&#39;15th_century&#39;, &#39;1600&#39;, &#39;1600s&#39;, &#39;1603&#39;, &#39;1605&#39;, &#39;1606&#39;, &#39;1607&#39;, &#39;1608&#39;, &#39;1609&#39;, &#39;1610&#39;]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">pagerank</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">iters</span><span class="p">):</span>

    <span class="n">adj</span><span class="p">,</span><span class="n">m</span> <span class="o">=</span> <span class="n">adjacency_matrix</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
    <span class="n">adj</span> <span class="o">=</span> <span class="n">adj</span><span class="o">.</span><span class="n">todense</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">adj</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">adj</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
        <span class="n">diff</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">adj</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">adj</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">diff</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">diff</span><span class="p">)):</span>
                <span class="n">adj</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">adj</span><span class="p">,[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">diff</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">diff</span><span class="p">):</span>
                <span class="n">adj</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">adj</span><span class="p">,[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="n">nodes</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">adj</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">ones</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="n">nodes</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>

    <span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">divide</span><span class="p">(</span><span class="n">adj</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">adj</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
    <span class="n">P</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan_to_num</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">nan</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">adj</span><span class="p">))</span>
    <span class="n">P_hat</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span><span class="o">*</span><span class="n">P</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="n">d</span><span class="p">)</span><span class="o">/</span><span class="n">nodes</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">ones</span><span class="p">)</span><span class="o">*</span><span class="n">ones</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">nodes</span><span class="p">)</span><span class="o">*</span><span class="n">ones</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iters</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">P_hat</span> <span class="o">@</span> <span class="n">x</span>

    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">adj</span><span class="p">)[</span><span class="mi">0</span><span class="p">]:</span>
            <span class="k">break</span>
        <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">float</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
    
    <span class="n">sort</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">out</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">final</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sort</span><span class="p">:</span>
        <span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">=</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    
    <span class="k">return</span> <span class="n">final</span>
    
<span class="nb">print</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">pagerank</span><span class="p">(</span><span class="n">wikipedia_graph</span><span class="p">,</span> <span class="mf">0.85</span><span class="p">,</span> <span class="mi">100</span><span class="p">)))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stderr output_text">
<pre>/var/folders/38/wmjyvl8168596jj3_018jpxr0000gn/T/ipykernel_11150/423940677.py:18: RuntimeWarning: invalid value encountered in true_divide
  v = np.divide(adj,np.sum(adj,axis=0))
</pre>
</div>
</div>

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[&#39;.NET_Framework&#39;, &#39;020&#39;, &#39;0_(number)&#39;, &#39;1._FC_Köln&#39;, &#39;1000000000_(number)&#39;, &#39;100_metres&#39;, &#39;104th_United_States_Congress&#39;, &#39;107th_United_States_Congress&#39;, &#39;1080i&#39;, &#39;108th_United_States_Congress&#39;, &#39;109th_United_States_Congress&#39;, &#39;10th_century&#39;, &#39;110th_United_States_Congress&#39;, &#39;11th_century&#39;, &#39;12-inch_single&#39;, &#39;122d_Fighter_Wing&#39;, &#39;128th_Air_Refueling_Wing&#39;, &#39;12\\&#34;&#39;, &#39;12th_century&#39;, &#39;133d_Airlift_Wing&#39;, &#39;13th_century&#39;, &#39;1492&#39;, &#39;14th_Lok_Sabha&#39;, &#39;14th_century&#39;, &#39;1500&#39;, &#39;1500_metres&#39;, &#39;1521&#39;, &#39;1536&#39;, &#39;1540&#39;, &#39;1547&#39;, &#39;1550&#39;, &#39;1555&#39;, &#39;1558&#39;, &#39;1560&#39;, &#39;1567&#39;, &#39;1572&#39;, &#39;1581&#39;, &#39;1585&#39;, &#39;1588&#39;, &#39;1598&#39;, &#39;15th_century&#39;, &#39;1600&#39;, &#39;1600s&#39;, &#39;1603&#39;, &#39;1605&#39;, &#39;1606&#39;, &#39;1607&#39;, &#39;1608&#39;, &#39;1609&#39;, &#39;1610&#39;, &#39;1611&#39;, &#39;1612&#39;, &#39;1613&#39;, &#39;1619&#39;, &#39;1620&#39;, &#39;1621&#39;, &#39;1623&#39;, &#39;1625&#39;, &#39;1626&#39;, &#39;1627&#39;, &#39;1628&#39;, &#39;1630&#39;, &#39;1632&#39;, &#39;1634&#39;, &#39;1638&#39;, &#39;1640&#39;, &#39;1641&#39;, &#39;1642&#39;, &#39;1643&#39;, &#39;1644&#39;, &#39;1645&#39;, &#39;1648&#39;, &#39;1649&#39;, &#39;1650&#39;, &#39;1651&#39;, &#39;1653&#39;, &#39;1654&#39;, &#39;1658&#39;, &#39;1659&#39;, &#39;1660&#39;, &#39;1661&#39;, &#39;1662&#39;, &#39;1663&#39;, &#39;1664&#39;, &#39;1665&#39;, &#39;1666&#39;, &#39;1667&#39;, &#39;1670&#39;, &#39;1672&#39;, &#39;1674&#39;, &#39;1675&#39;, &#39;1676&#39;, &#39;1678&#39;, &#39;1679&#39;, &#39;1680&#39;, &#39;1681&#39;, &#39;1682&#39;, &#39;1683&#39;, &#39;1684&#39;, &#39;1685&#39;, &#39;1687&#39;, &#39;1688&#39;, &#39;1689&#39;, &#39;1690&#39;, &#39;1691&#39;, &#39;1692&#39;, &#39;1693&#39;, &#39;1694&#39;, &#39;1695&#39;, &#39;1697&#39;, &#39;1698&#39;, &#39;1699&#39;, &#39;16th_century&#39;, &#39;1700&#39;, &#39;1700s&#39;, &#39;1701&#39;, &#39;1702&#39;, &#39;1703&#39;, &#39;1704&#39;, &#39;1705&#39;, &#39;1706&#39;, &#39;1707&#39;, &#39;1708&#39;, &#39;1709&#39;, &#39;1710&#39;, &#39;1711&#39;, &#39;1712&#39;, &#39;1713&#39;, &#39;1714&#39;, &#39;1715&#39;, &#39;1716&#39;, &#39;1717&#39;, &#39;1718&#39;, &#39;1719&#39;, &#39;1720&#39;, &#39;1720s&#39;, &#39;1721&#39;, &#39;1722&#39;, &#39;1723&#39;, &#39;1724&#39;, &#39;1725&#39;, &#39;1726&#39;, &#39;1727&#39;, &#39;1728&#39;, &#39;1729&#39;, &#39;1730&#39;, &#39;1730s&#39;, &#39;1731&#39;, &#39;1732&#39;, &#39;1733&#39;, &#39;1734&#39;, &#39;1735&#39;, &#39;1736&#39;, &#39;1737&#39;, &#39;1738&#39;, &#39;1739&#39;, &#39;1740&#39;, &#39;1740s&#39;, &#39;1741&#39;, &#39;1742&#39;, &#39;1743&#39;, &#39;1744&#39;, &#39;1745&#39;, &#39;1746&#39;, &#39;1747&#39;, &#39;1748&#39;, &#39;1749&#39;, &#39;1750&#39;, &#39;1750s&#39;, &#39;1751&#39;, &#39;1752&#39;, &#39;1753&#39;, &#39;1754&#39;, &#39;1755&#39;, &#39;1756&#39;, &#39;1757&#39;, &#39;1758&#39;, &#39;1759&#39;, &#39;1760&#39;, &#39;1760s&#39;, &#39;1761&#39;, &#39;1762&#39;, &#39;1763&#39;, &#39;1764&#39;, &#39;1765&#39;, &#39;1766&#39;, &#39;1767&#39;, &#39;1768&#39;, &#39;1769&#39;, &#39;1770&#39;, &#39;1770s&#39;, &#39;1771&#39;, &#39;1772&#39;, &#39;1773&#39;, &#39;1774&#39;, &#39;1775&#39;, &#39;1776&#39;, &#39;1777&#39;, &#39;1778&#39;, &#39;1779&#39;, &#39;1780&#39;, &#39;1780s&#39;, &#39;1781&#39;, &#39;1782&#39;, &#39;1783&#39;, &#39;1784&#39;, &#39;1785&#39;, &#39;1786&#39;, &#39;1787&#39;, &#39;1788&#39;, &#39;1789&#39;, &#39;1790&#39;, &#39;1790s&#39;, &#39;1791&#39;, &#39;1792&#39;, &#39;1793&#39;, &#39;1794&#39;, &#39;1795&#39;, &#39;1796&#39;, &#39;1797&#39;, &#39;1798&#39;, &#39;1799&#39;, &#39;17th_century&#39;, &#39;1800&#39;, &#39;1800s&#39;, &#39;1801&#39;, &#39;1802&#39;, &#39;1803&#39;, &#39;1804&#39;, &#39;1805&#39;, &#39;1806&#39;, &#39;1807&#39;, &#39;1808&#39;, &#39;1809&#39;, &#39;1810&#39;, &#39;1810s&#39;, &#39;1811&#39;, &#39;1812&#39;, &#39;1813&#39;, &#39;1814&#39;, &#39;1815&#39;, &#39;1816&#39;, &#39;1817&#39;, &#39;1818&#39;, &#39;1819&#39;, &#39;1820&#39;, &#39;1820s&#39;, &#39;1821&#39;, &#39;1822&#39;, &#39;1823&#39;, &#39;1824&#39;, &#39;1825&#39;, &#39;1826&#39;, &#39;1827&#39;, &#39;1828&#39;, &#39;1829&#39;, &#39;1830&#39;, &#39;1830s&#39;, &#39;1831&#39;, &#39;1832&#39;, &#39;1833&#39;, &#39;1834&#39;, &#39;1835&#39;, &#39;1836&#39;, &#39;1837&#39;, &#39;1838&#39;, &#39;1839&#39;, &#39;1840&#39;, &#39;1840s&#39;, &#39;1841&#39;, &#39;1842&#39;, &#39;1843&#39;, &#39;1844&#39;, &#39;1845&#39;, &#39;1846&#39;, &#39;1847&#39;, &#39;1848&#39;, &#39;1849&#39;, &#39;1850&#39;, &#39;1850s&#39;, &#39;1851&#39;, &#39;1852&#39;, &#39;1853&#39;, &#39;1854&#39;, &#39;1855&#39;, &#39;1856&#39;, &#39;1857&#39;, &#39;1858&#39;, &#39;1859&#39;, &#39;1860&#39;, &#39;1860s&#39;, &#39;1861&#39;, &#39;1862&#39;, &#39;1863&#39;, &#39;1864&#39;, &#39;1865&#39;, &#39;1866&#39;, &#39;1867&#39;, &#39;1868&#39;, &#39;1869&#39;, &#39;1870&#39;, &#39;1870s&#39;, &#39;1871&#39;, &#39;1872&#39;, &#39;1873&#39;, &#39;1874&#39;, &#39;1875&#39;, &#39;1876&#39;, &#39;1876_in_baseball&#39;, &#39;1877&#39;, &#39;1878&#39;, &#39;1879&#39;, &#39;1880&#39;, &#39;1880s&#39;, &#39;1881&#39;, &#39;1882&#39;, &#39;1882_in_baseball&#39;, &#39;1883&#39;, &#39;1883_in_baseball&#39;, &#39;1884&#39;, &#39;1885&#39;, &#39;1885_in_baseball&#39;, &#39;1886&#39;, &#39;1886_in_baseball&#39;, &#39;1887&#39;, &#39;1887_in_baseball&#39;, &#39;1888&#39;, &#39;1888_in_baseball&#39;, &#39;1889&#39;, &#39;1889_in_baseball&#39;, &#39;1890&#39;, &#39;1890_in_baseball&#39;, &#39;1890s&#39;, &#39;1891&#39;, &#39;1891_in_baseball&#39;, &#39;1892&#39;, &#39;1892_in_baseball&#39;, &#39;1893&#39;, &#39;1894&#39;, &#39;1895&#39;, &#39;1896&#39;, &#39;1896_Summer_Olympics&#39;, &#39;1897&#39;, &#39;1898&#39;, &#39;1898_in_baseball&#39;, &#39;1899&#39;, &#39;1899_in_baseball&#39;, &#39;18th_century&#39;, &#39;1900&#39;, &#39;1900_Summer_Olympics&#39;, &#39;1900_in_baseball&#39;, &#39;1900s&#39;, &#39;1901&#39;, &#39;1901_in_baseball&#39;, &#39;1902&#39;, &#39;1902_in_baseball&#39;, &#39;1903&#39;, &#39;1903_World_Series&#39;, &#39;1903_in_baseball&#39;, &#39;1904&#39;, &#39;1904_Summer_Olympics&#39;, &#39;1904_in_baseball&#39;, &#39;1905&#39;, &#39;1905_in_baseball&#39;, &#39;1906&#39;, &#39;1906_in_baseball&#39;, &#39;1907&#39;, &#39;1907_World_Series&#39;, &#39;1907_in_baseball&#39;, &#39;1908&#39;, &#39;1908_Summer_Olympics&#39;, &#39;1908_World_Series&#39;, &#39;1908_in_baseball&#39;, &#39;1909&#39;, &#39;1910&#39;, &#39;1910_in_baseball&#39;, &#39;1910s&#39;, &#39;1911&#39;, &#39;1911_in_baseball&#39;, &#39;1912&#39;, &#39;1912_Summer_Olympics&#39;, &#39;1912_in_baseball&#39;, &#39;1913&#39;, &#39;1913_in_baseball&#39;, &#39;1913_in_film&#39;, &#39;1914&#39;, &#39;1914_in_baseball&#39;, &#39;1914_in_film&#39;, &#39;1915&#39;, &#39;1915_in_baseball&#39;, &#39;1915_in_film&#39;, &#39;1916&#39;, &#39;1916_World_Series&#39;, &#39;1916_in_baseball&#39;, &#39;1916_in_film&#39;, &#39;1917&#39;, &#39;1917_in_baseball&#39;, &#39;1917_in_film&#39;, &#39;1918&#39;, &#39;1918_in_baseball&#39;, &#39;1918_in_film&#39;, &#39;1919&#39;, &#39;1919_in_baseball&#39;, &#39;1919_in_film&#39;, &#39;1920&#39;, &#39;1920_Summer_Olympics&#39;, &#39;1920_World_Series&#39;, &#39;1920_in_film&#39;, &#39;1920s&#39;, &#39;1921&#39;, &#39;1921_in_baseball&#39;, &#39;1921_in_film&#39;, &#39;1922&#39;, &#39;1922_in_baseball&#39;, &#39;1922_in_film&#39;, &#39;1923&#39;, &#39;1923_in_baseball&#39;, &#39;1923_in_film&#39;, &#39;1924&#39;, &#39;1924_Summer_Olympics&#39;, &#39;1924_in_baseball&#39;, &#39;1924_in_film&#39;, &#39;1925&#39;, &#39;1925_in_film&#39;, &#39;1926&#39;, &#39;1926_in_baseball&#39;, &#39;1926_in_film&#39;, &#39;1927&#39;, &#39;1927_World_Series&#39;, &#39;1927_in_baseball&#39;, &#39;1927_in_film&#39;, &#39;1928&#39;, &#39;1928_Summer_Olympics&#39;, &#39;1928_World_Series&#39;, &#39;1928_in_baseball&#39;, &#39;1928_in_film&#39;, &#39;1929&#39;, &#39;1929_in_baseball&#39;, &#39;1929_in_film&#39;, &#39;1930&#39;, &#39;1930_World_Series&#39;, &#39;1930_in_baseball&#39;, &#39;1930_in_film&#39;, &#39;1930s&#39;, &#39;1931&#39;, &#39;1931_in_film&#39;, &#39;1932&#39;, &#39;1932_Summer_Olympics&#39;, &#39;1932_in_baseball&#39;, &#39;1932_in_film&#39;, &#39;1933&#39;, &#39;1933_in_baseball&#39;, &#39;1933_in_film&#39;, &#39;1934&#39;, &#39;1934_in_film&#39;, &#39;1935&#39;, &#39;1935_in_baseball&#39;, &#39;1935_in_film&#39;, &#39;1936&#39;, &#39;1936_Summer_Olympics&#39;, &#39;1936_Winter_Olympics&#39;, &#39;1936_in_baseball&#39;, &#39;1936_in_film&#39;, &#39;1937&#39;, &#39;1937_in_baseball&#39;, &#39;1937_in_film&#39;, &#39;1938&#39;, &#39;1938_in_baseball&#39;, &#39;1938_in_film&#39;, &#39;1939&#39;, &#39;1939_in_baseball&#39;, &#39;1939_in_film&#39;, &#39;1940&#39;, &#39;1940_in_baseball&#39;, &#39;1940_in_film&#39;, &#39;1940s&#39;, &#39;1941&#39;, &#39;1941_World_Series&#39;, &#39;1941_in_baseball&#39;, &#39;1941_in_film&#39;, &#39;1942&#39;, &#39;1942_in_baseball&#39;, &#39;1942_in_film&#39;, &#39;1943&#39;, &#39;1943_World_Series&#39;, &#39;1943_in_baseball&#39;, &#39;1943_in_film&#39;, &#39;1944&#39;, &#39;1944_in_film&#39;, &#39;1945&#39;, &#39;1945_in_baseball&#39;, &#39;1945_in_film&#39;, &#39;1946&#39;, &#39;1946_in_baseball&#39;, &#39;1946_in_film&#39;, &#39;1947&#39;, &#39;1947_World_Series&#39;, &#39;1947_in_baseball&#39;, &#39;1947_in_film&#39;, &#39;1948&#39;, &#39;1948_Arab-Israeli_War&#39;, &#39;1948_Summer_Olympics&#39;, &#39;1948_in_baseball&#39;, &#39;1948_in_film&#39;, &#39;1949&#39;, &#39;1949_World_Series&#39;, &#39;1949_in_baseball&#39;, &#39;1949_in_film&#39;, &#39;1950&#39;, &#39;1950_in_baseball&#39;, &#39;1950_in_film&#39;, &#39;1950s&#39;, &#39;1951&#39;, &#39;1951_in_baseball&#39;, &#39;1951_in_film&#39;, &#39;1952&#39;, &#39;1952_Summer_Olympics&#39;, &#39;1952_Winter_Olympics&#39;, &#39;1952_World_Series&#39;, &#39;1952_in_baseball&#39;, &#39;1952_in_film&#39;, &#39;1953&#39;, &#39;1953_World_Series&#39;, &#39;1953_in_baseball&#39;, &#39;1953_in_film&#39;, &#39;1954&#39;, &#39;1954_World_Series&#39;, &#39;1954_in_baseball&#39;, &#39;1954_in_film&#39;, &#39;1955&#39;, &#39;1955_in_baseball&#39;, &#39;1955_in_film&#39;, &#39;1956&#39;, &#39;1956_Summer_Olympics&#39;, &#39;1956_World_Series&#39;, &#39;1956_in_baseball&#39;, &#39;1956_in_film&#39;, &#39;1957&#39;, &#39;1957_in_baseball&#39;, &#39;1957_in_film&#39;, &#39;1958&#39;, &#39;1958_FIFA_World_Cup&#39;, &#39;1958_in_baseball&#39;, &#39;1958_in_film&#39;, &#39;1959&#39;, &#39;1959_in_baseball&#39;, &#39;1959_in_film&#39;, &#39;1960&#39;, &#39;1960_Summer_Olympics&#39;, &#39;1960_in_baseball&#39;, &#39;1960_in_film&#39;, &#39;1960s&#39;, &#39;1961&#39;, &#39;1961_World_Series&#39;, &#39;1961_in_baseball&#39;, &#39;1961_in_film&#39;, &#39;1962&#39;, &#39;1962_World_Series&#39;, &#39;1962_in_baseball&#39;, &#39;1962_in_film&#39;, &#39;1963&#39;, &#39;1963_in_baseball&#39;, &#39;1963_in_film&#39;, &#39;1964&#39;, &#39;1964_Summer_Olympics&#39;, &#39;1964_in_baseball&#39;, &#39;1964_in_film&#39;, &#39;1965&#39;, &#39;1965_World_Series&#39;, &#39;1965_in_baseball&#39;, &#39;1965_in_film&#39;, &#39;1966&#39;, &#39;1966_FIFA_World_Cup&#39;, &#39;1966_World_Series&#39;, &#39;1966_in_baseball&#39;, &#39;1966_in_film&#39;, &#39;1967&#39;, &#39;1967_in_baseball&#39;, &#39;1967_in_film&#39;, &#39;1968&#39;, &#39;1968_Summer_Olympics&#39;, &#39;1968_World_Series&#39;, &#39;1968_in_baseball&#39;, &#39;1968_in_film&#39;, &#39;1969&#39;, &#39;1969_in_baseball&#39;, &#39;1969_in_film&#39;, &#39;1970&#39;, &#39;1970_FIFA_World_Cup&#39;, &#39;1970_National_League_Championship_Series&#39;, &#39;1970_in_baseball&#39;, &#39;1970_in_film&#39;, &#39;1970s&#39;, &#39;1970s_in_film&#39;, &#39;1971&#39;, &#39;1971_in_baseball&#39;, &#39;1971_in_film&#39;, &#39;1972&#39;, &#39;1972_Summer_Olympics&#39;, &#39;1972_Winter_Olympics&#39;, &#39;1972_in_baseball&#39;, &#39;1972_in_film&#39;, &#39;1973&#39;, &#39;1973_in_baseball&#39;, &#39;1973_in_film&#39;, &#39;1974&#39;, &#39;1974_FIFA_World_Cup&#39;, &#39;1974_National_League_Championship_Series&#39;, &#39;1974_in_baseball&#39;, &#39;1974_in_film&#39;, &#39;1975&#39;, &#39;1975_National_League_Championship_Series&#39;, &#39;1975_World_Series&#39;, &#39;1975_in_baseball&#39;, &#39;1975_in_film&#39;, &#39;1976&#39;, &#39;1976_Summer_Olympics&#39;, &#39;1976_Winter_Olympics&#39;, &#39;1976_in_baseball&#39;, &#39;1976_in_film&#39;, &#39;1977&#39;, &#39;1977_in_baseball&#39;, &#39;1977_in_film&#39;, &#39;1978&#39;, &#39;1978_FIFA_World_Cup&#39;, &#39;1978_World_Series&#39;, &#39;1978_in_baseball&#39;, &#39;1978_in_film&#39;, &#39;1979&#39;, &#39;1979_in_baseball&#39;, &#39;1979_in_film&#39;, &#39;1979_in_music&#39;, &#39;1980&#39;, &#39;1980_Summer_Olympics&#39;, &#39;1980_Winter_Olympics&#39;, &#39;1980_in_baseball&#39;, &#39;1980_in_film&#39;, &#39;1980s&#39;, &#39;1980s_in_film&#39;, &#39;1981&#39;, &#39;1981_in_baseball&#39;, &#39;1981_in_film&#39;, &#39;1982&#39;, &#39;1982_FIFA_World_Cup&#39;, &#39;1982_in_baseball&#39;, &#39;1982_in_film&#39; ...]
</pre>
</div>
</div>

</div>
</div>

</div>
    </div>
  </div>
</body>







</html>
