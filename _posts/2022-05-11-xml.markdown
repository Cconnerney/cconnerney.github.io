---
layout: post
title: XML Parsing
description: Use regex to write a function that will parse (a simplified version of) XML files into a Python object.
img: xml.jpg # Add image post (optional)
tags: [XML, Parsing]
---

<html>
<head><meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>xml_parser</title><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>

<style type="text/css">
  pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.highlight .hll { background-color: #ffffcc }
.highlight { background: #f8f8f8; }
.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #9C6500 } /* Comment.Preproc */
.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */
.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #E40000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #008400 } /* Generic.Inserted */
.highlight .go { color: #717171 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #687822 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #767600 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #666666 } /* Literal.Number.Bin */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sa { color: #BA2121 } /* Literal.String.Affix */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #A45A77 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #0000FF } /* Name.Function.Magic */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .vm { color: #19177C } /* Name.Variable.Magic */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

<!-- Load mathjax -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"> </script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    init_mathjax = function() {
        if (window.MathJax) {
        // MathJax loaded
            MathJax.Hub.Config({
                TeX: {
                    equationNumbers: {
                    autoNumber: "AMS",
                    useLabelIds: true
                    }
                },
                tex2jax: {
                    inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                    displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
                    processEscapes: true,
                    processEnvironments: true
                },
                displayAlign: 'center',
                CommonHTML: {
                    linebreaks: {
                    automatic: true
                    }
                }
            });

            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
    }
    init_mathjax();
    </script>
    <!-- End of mathjax configuration --></head>
<body>

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="XML-Parser">XML Parser<a class="anchor-link" href="#XML-Parser">&#182;</a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Use regex to write a function that will parse (a simplified version of) XML files into a Python object.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">tag_open</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;)([a-zA-Z0-9][^&gt;^&lt;^\s]*)([^&lt;^&gt;]*)(?=\&gt;|/\&gt;)&quot;</span><span class="p">)</span>   
<span class="n">tag_close</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;/)[a-zA-Z0-9]*(?=\&gt;)&quot;</span><span class="p">)</span>
<span class="n">tag_open_close</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;)([^\s.]*)([^&lt;^&gt;]*)(?=/\&gt;)&quot;</span><span class="p">)</span>       

<span class="n">comment</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;!--)([^-]*)(?=--\&gt;)&quot;</span><span class="p">)</span>                         
<span class="n">xml_prolog</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;\?).*(?=\?\&gt;)&quot;</span><span class="p">)</span>
<span class="n">html_declaration</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;!)[\sa-zA-Z]*&quot;</span><span class="o">+</span><span class="s2">&quot;html&quot;</span><span class="o">+</span><span class="s2">&quot;(?=&gt;)&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">tag_regex</span><span class="p">(</span><span class="n">inp</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="s2">&quot;tag_open&quot;</span><span class="p">:</span> <span class="n">tag_open</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">inp</span><span class="p">),</span>
        <span class="s2">&quot;tag_close&quot;</span><span class="p">:</span> <span class="n">tag_close</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">inp</span><span class="p">),</span>
        <span class="s2">&quot;tag_open_close&quot;</span><span class="p">:</span> <span class="n">tag_open_close</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">inp</span><span class="p">),</span>
        <span class="s2">&quot;comment&quot;</span><span class="p">:</span> <span class="n">comment</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">inp</span><span class="p">),</span>
        <span class="s2">&quot;xml_prolog&quot;</span><span class="p">:</span> <span class="n">xml_prolog</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">inp</span><span class="p">),</span>
        <span class="s2">&quot;html_declaration&quot;</span><span class="p">:</span> <span class="n">html_declaration</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">class</span> <span class="nc">XMLNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tag</span><span class="p">,</span> <span class="n">attributes</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>     
        <span class="n">tag_open</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;)([a-zA-Z0-9][a-zA-Z0-9]*)([^&lt;^&gt;]*)(?=\&gt;|/\&gt;)&quot;</span><span class="p">)</span>  

        <span class="bp">self</span><span class="o">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">tag</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">attributes</span> <span class="o">=</span> <span class="n">attributes</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">content</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="n">stop</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="n">positions</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="nb">all</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s1">&#39;&lt;&#39;</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">all</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">content</span><span class="p">):</span>
            <span class="n">positions</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">end</span><span class="p">())</span>

        <span class="k">for</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">positions</span><span class="p">:</span>          

            <span class="k">if</span> <span class="n">pos</span> <span class="o">&gt;</span> <span class="n">stop</span><span class="p">:</span>
                <span class="c1">#match opening tag</span>
                <span class="n">o</span> <span class="o">=</span> <span class="n">tag_open</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">content</span><span class="p">,</span><span class="n">pos</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">o</span> <span class="o">!=</span> <span class="kc">None</span><span class="p">:</span>
                    <span class="n">start</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="n">end</span><span class="p">()</span>
        
                    <span class="n">test</span><span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="n">o</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="n">o</span><span class="o">.</span><span class="n">end</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
                    <span class="n">num</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">content</span><span class="p">,</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                    <span class="n">matches</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>

                    <span class="c1"># opening tag</span>
                    <span class="n">o</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
                    <span class="n">tag</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

                    <span class="c1"># attribute dictionary</span>
                    <span class="n">first</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;[^</span><span class="se">\&quot;</span><span class="s2">|&#39;&#39;.]*(?=</span><span class="se">\&quot;</span><span class="s2">|&#39;)&quot;</span><span class="p">,</span><span class="n">o</span><span class="p">)</span>
                    <span class="n">val</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&quot;(?&lt;=</span><span class="se">\&quot;</span><span class="s2">|&#39;)[^</span><span class="se">\&quot;</span><span class="s2">^&#39;]*(?=</span><span class="se">\&quot;</span><span class="s2">|&#39;)&quot;</span><span class="p">,</span><span class="n">o</span><span class="p">)</span> 

                    <span class="n">attr</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="k">if</span> <span class="n">first</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
                        <span class="n">attr</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">f</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="n">group</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
                        <span class="n">p</span> <span class="o">=</span> <span class="p">[]</span>
                        <span class="n">p</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                        <span class="n">p</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
                        <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
                            <span class="k">if</span> <span class="n">n</span> <span class="o">%</span><span class="k">2</span> == 0:
                                <span class="n">v</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
                                <span class="n">attr</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>

                    <span class="n">end</span> <span class="o">=</span> <span class="mi">1</span>
                    <span class="n">con</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>

                    <span class="k">if</span> <span class="n">content</span><span class="p">[</span><span class="n">start</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span><span class="p">:</span>
                        <span class="n">con</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
                    <span class="k">else</span><span class="p">:</span>
                    <span class="c1"># match equivalent closing tag</span>
                        <span class="k">if</span> <span class="n">matches</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
                            <span class="n">tag_close</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;/)</span><span class="si">%s</span><span class="s2">(?=\&gt;)&quot;</span> <span class="o">%</span> <span class="n">tag</span><span class="p">)</span>
                            <span class="n">c</span> <span class="o">=</span> <span class="n">tag_close</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">content</span><span class="p">,</span><span class="n">pos</span><span class="p">)</span>
                            <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="kc">None</span><span class="p">:</span>
                                <span class="n">end</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
                                <span class="n">con</span> <span class="o">=</span> <span class="n">content</span><span class="p">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">end</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
                        <span class="k">elif</span> <span class="n">matches</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">tag_close</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;(?&lt;=\&lt;/)</span><span class="si">%s</span><span class="s2">(?=\&gt;)&quot;</span> <span class="o">%</span> <span class="n">tag</span><span class="p">)</span> 
                            <span class="n">c</span> <span class="o">=</span> <span class="n">tag_close</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">content</span><span class="p">,</span><span class="n">pos</span><span class="p">)</span>
                            <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="kc">None</span><span class="p">:</span>
                                <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
                                    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="n">matches</span><span class="p">:</span>
                                        <span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
                                        <span class="n">con</span> <span class="o">=</span> <span class="n">content</span><span class="p">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">end</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>

                    <span class="bp">self</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">XMLNode</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span><span class="n">attr</span><span class="p">,</span><span class="n">con</span><span class="p">))</span>    
                    <span class="n">stop</span> <span class="o">=</span> <span class="n">end</span>
 
<span class="k">def</span> <span class="nf">create_xml_tree</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
            
    <span class="k">return</span> <span class="n">XMLNode</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="n">text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;__main__.XMLNode object at 0x7fcde414d190&gt;
</pre>
</div>
</div>

</div>
</div>

</div>

</body>







</html>
