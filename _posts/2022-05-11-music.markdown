---
layout: post
title: Music Intelligence
description: The data science objective within this project is to understand the listener’s profile. We’ll be analyzing the mood of user playlists and recommend songs using a content-based filtering system. 
img: radio.jpg # Add image post (optional)
tags: [Recommendation, Viz, Jupyter]
---

<html>
<head><meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>M3</title><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>

<style type="text/css">
  pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.highlight .hll { background-color: #ffffcc }
.highlight { background: #f8f8f8; }
.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #9C6500 } /* Comment.Preproc */
.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */
.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #E40000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #008400 } /* Generic.Inserted */
.highlight .go { color: #717171 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #687822 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #767600 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #666666 } /* Literal.Number.Bin */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sa { color: #BA2121 } /* Literal.String.Affix */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #A45A77 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #0000FF } /* Name.Function.Magic */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .vm { color: #19177C } /* Name.Variable.Magic */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

<!-- Load mathjax -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"> </script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    init_mathjax = function() {
        if (window.MathJax) {
        // MathJax loaded
            MathJax.Hub.Config({
                TeX: {
                    equationNumbers: {
                    autoNumber: "AMS",
                    useLabelIds: true
                    }
                },
                tex2jax: {
                    inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                    displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
                    processEscapes: true,
                    processEnvironments: true
                },
                displayAlign: 'center',
                CommonHTML: {
                    linebreaks: {
                    automatic: true
                    }
                }
            });

            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
    }
    init_mathjax();
    </script>
    <!-- End of mathjax configuration --></head>
<body>

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="Music-Intelligence-with-Spotify">Music Intelligence with Spotify<a class="anchor-link" href="#Music-Intelligence-with-Spotify">&#182;</a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Spotify is the largest on-demand music service provider, in large part due to their implementation of new technologies and application of big data. Spotify’s competitive advantage is their ability to transform streaming into a personalized experience built by machine learning and natural language processing algorithms. Spotify uses recommendation systems to engage and retain listeners, increase customer satisfaction, and increase revenue.</p>
<p>Music data gives insights into a listener’s psyche. Use cases of music data are continuing to grow; It’s used to curate targeted marketing campaigns, plan artist tour routes, and track music tastes. Spotify's data collection is referred to as “emotional surveillance” or “music intelligence”.</p>
<p>The data science objective within this project is to understand the listener’s profile. We’ll be analyzing the mood of user playlists and recommend songs using a content-based filtering system.</p>
<p>In this analysis, we'll be focusing on several key questions.</p>
<ul>
<li>What is the distribution of audio features in a large dataset of songs?</li>
<li>How do playlist audio features differ across users?</li>
<li>What songs are similar to one another – can they be classified into genres?</li>
<li>What songs can we recommend to users using a content-based recommender system?</li>
<li>What other playlists is a user's music most similar to?</li>
</ul>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">!</span>pip install spotipy
<span class="o">!</span>pip install dash
<span class="o">!</span>pip install jupyter_dash
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">dash</span> <span class="kn">import</span> <span class="n">Dash</span><span class="p">,</span> <span class="n">dcc</span><span class="p">,</span> <span class="n">html</span><span class="p">,</span> <span class="n">Input</span><span class="p">,</span> <span class="n">Output</span>
<span class="kn">import</span> <span class="nn">dash_core_components</span> <span class="k">as</span> <span class="nn">dcc</span>
<span class="kn">import</span> <span class="nn">dash_html_components</span> <span class="k">as</span> <span class="nn">html</span>
<span class="kn">from</span> <span class="nn">dash.dependencies</span> <span class="kn">import</span> <span class="n">Input</span><span class="p">,</span> <span class="n">Output</span>
<span class="kn">from</span> <span class="nn">jupyter_dash</span> <span class="kn">import</span> <span class="n">JupyterDash</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
<span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>
<span class="kn">from</span> <span class="nn">plotly.subplots</span> <span class="kn">import</span> <span class="n">make_subplots</span>
<span class="kn">from</span> <span class="nn">plotly.figure_factory</span> <span class="kn">import</span> <span class="n">create_2d_density</span>
<span class="kn">import</span> <span class="nn">spotipy</span>
<span class="kn">from</span> <span class="nn">spotipy.oauth2</span> <span class="kn">import</span> <span class="n">SpotifyClientCredentials</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">sklearn.manifold</span> <span class="kn">import</span> <span class="n">TSNE</span>
<span class="kn">from</span> <span class="nn">scipy.spatial.distance</span> <span class="kn">import</span> <span class="n">cdist</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We’ll be performing data collection through the use of the Spotify API. Using a client ID and secret key acquired through spotify's
<a href="https://developer.spotify.com/dashboard/">developer dashboard</a>, we are able to access playlist data using links sent to us by friends</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">cid</span> <span class="o">=</span> <span class="s1">&#39;client_id&#39;</span>
<span class="n">secret</span> <span class="o">=</span> <span class="s1">&#39;secret&#39;</span>
<span class="n">client_credentials_manager</span> <span class="o">=</span> <span class="n">SpotifyClientCredentials</span><span class="p">(</span><span class="n">client_id</span><span class="o">=</span><span class="n">cid</span><span class="p">,</span> <span class="n">client_secret</span><span class="o">=</span><span class="n">secret</span><span class="p">)</span>
<span class="n">sp</span> <span class="o">=</span> <span class="n">spotipy</span><span class="o">.</span><span class="n">Spotify</span><span class="p">(</span><span class="n">client_credentials_manager</span><span class="o">=</span><span class="n">client_credentials_manager</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">stored_playlists</span><span class="o">=</span><span class="p">{</span>\
<span class="s1">&#39;huseinH_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/787g5agmc3mkhMP2yuuUq4?si=I9XqOCjHRpeTp0OATzR1pA&#39;</span><span class="p">,</span>\
<span class="s1">&#39;cristinC_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/1hJGuIjNJ5FqnzpHPLhiBq?si=FyEfvFXiRSetkuAKyyF13Q&#39;</span><span class="p">,</span>\
<span class="s1">&#39;haleyS_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/3fyXTn20ryd5Qi8tVgbrQE?si=l5Ke7OWiRpGbUONlWdj86Q&#39;</span><span class="p">,</span>\
<span class="s1">&#39;samH_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/7uT4eRwuzhWRoH5pySFvJs?si=HuIZ_hmGTqaC5SsEdcTHRg&#39;</span><span class="p">,</span>\
<span class="s1">&#39;jennaS_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/0NPdcEC2d23aRUGVX3lWg4?si=b-iboKJyQB6DEuWQ7aAu7A&#39;</span><span class="p">,</span>\
<span class="s1">&#39;natalieH_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/6RBxXZ5qbNQ1uLoVAa7NbX?si=IWr68P2DRziv_lzODVNTAg&#39;</span><span class="p">,</span>\
<span class="s1">&#39;mehulG_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/1UnaV6jlGUbOcQfAy1sX5t?si=H4Ard-QHQ4u4t7VzUQoHYg&#39;</span><span class="p">,</span>\
<span class="s1">&#39;architM_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/1CJ0iKHy0CsEwwgIBlFEGQ?si=H5iLkQJlRKe7KzBRbUcVKw&#39;</span><span class="p">,</span>\
<span class="s1">&#39;callyL_playlist&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/1vYuLAvb7R0OLJrEtcyDLD?si=lyyPqXKoS422fMLsm8DYNQ&#39;</span><span class="p">,</span>\
<span class="s1">&#39;top_songs_global&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/37i9dQZEVXbNG2KDcFcKOF?si=1333723a6eff4b7f&#39;</span><span class="p">,</span>\
<span class="s1">&#39;get_turnt&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/37i9dQZF1DWY4xHQp97fN6&#39;</span><span class="p">,</span>\
<span class="s1">&#39;mellow_bars&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/37i9dQZF1DWT6MhXz0jw61&#39;</span><span class="p">,</span>\
<span class="s1">&#39;new_music_friday&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/37i9dQZF1DX4JAvHpjipBk&#39;</span><span class="p">,</span>\
<span class="s1">&#39;rap_caviar&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/37i9dQZF1DX0XUsuxWHRQd&#39;</span><span class="p">,</span>\
<span class="s1">&#39;pop_all_day&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/37i9dQZF1DXarRysLJmuju&#39;</span><span class="p">,</span>\
<span class="s1">&#39;songs_to_sing_in_the_car&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/37i9dQZF1DWWMOmoXKqHTD&#39;</span><span class="p">,</span>\
<span class="s1">&#39;level_up&#39;</span><span class="p">:</span><span class="s1">&#39;https://open.spotify.com/playlist/5Ea3GbZtAjQ4wEHfnbH3Bn?si=8PxpPcgYT5qS5sYo-IDlJQ&#39;</span> <span class="p">}</span>
    
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Spotipy-API">Spotipy API<a class="anchor-link" href="#Spotipy-API">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Using the Spotipy API wrapper, we pulled songs and corresponding audio features from each playlist. We stored the data in a dictionary of pandas dataframes.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">stored_playlists</span><span class="p">:</span>     
    
    <span class="n">link</span> <span class="o">=</span> <span class="n">stored_playlists</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>

    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;track name&#39;</span><span class="p">,</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">,</span><span class="s1">&#39;energy&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span>\
                                 <span class="s1">&#39;mode&#39;</span><span class="p">,</span><span class="s1">&#39;speechiness&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">,</span><span class="s1">&#39;instrumentalness&#39;</span><span class="p">,</span><span class="s1">&#39;liveness&#39;</span><span class="p">,</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span>\
                                 <span class="s1">&#39;tempo&#39;</span><span class="p">])</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">astype</span><span class="p">({</span><span class="s1">&#39;track name&#39;</span><span class="p">:</span><span class="s1">&#39;string&#39;</span><span class="p">,</span><span class="s1">&#39;artist&#39;</span><span class="p">:</span><span class="s1">&#39;string&#39;</span><span class="p">,</span><span class="s1">&#39;popularity&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span>\
                        <span class="s1">&#39;energy&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;mode&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span>\
                        <span class="s1">&#39;speechiness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span>\
                        <span class="s1">&#39;instrumentalness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;liveness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span> \
                        <span class="s1">&#39;valence&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">})</span>
    
    <span class="k">for</span> <span class="n">song</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">link</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
        <span class="n">track</span> <span class="o">=</span> <span class="n">song</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="n">artist</span> <span class="o">=</span> <span class="n">song</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="n">pop</span> <span class="o">=</span> <span class="n">song</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;popularity&#39;</span><span class="p">]</span>

        <span class="n">af</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">song</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>

        <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;track name&#39;</span><span class="p">:</span><span class="n">track</span><span class="p">,</span><span class="s1">&#39;artist&#39;</span><span class="p">:</span><span class="n">artist</span><span class="p">,</span><span class="s1">&#39;popularity&#39;</span><span class="p">:</span><span class="n">pop</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;danceability&#39;</span><span class="p">],</span>\
                        <span class="s1">&#39;energy&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;energy&#39;</span><span class="p">],</span><span class="s1">&#39;key&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;key&#39;</span><span class="p">],</span><span class="s1">&#39;loudness&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;loudness&#39;</span><span class="p">],</span><span class="s1">&#39;mode&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">],</span>\
                        <span class="s1">&#39;speechiness&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;speechiness&#39;</span><span class="p">],</span><span class="s1">&#39;acousticness&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;acousticness&#39;</span><span class="p">],</span>\
                        <span class="s1">&#39;instrumentalness&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;instrumentalness&#39;</span><span class="p">],</span><span class="s1">&#39;liveness&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;liveness&#39;</span><span class="p">],</span> \
                        <span class="s1">&#39;valence&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;valence&#39;</span><span class="p">],</span><span class="s1">&#39;tempo&#39;</span><span class="p">:</span><span class="n">af</span><span class="p">[</span><span class="s1">&#39;tempo&#39;</span><span class="p">]},</span><span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
  
    <span class="n">stored_playlists</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We're going to create a 'master' dataframe with all of the playlist data to use for analysis. We also use the all_playlists data to fit the MinMaxScaler in order to scale all of the audio features with a range outside of [0,1] to the same scale.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">all_playlists</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">,</span><span class="s1">&#39;track name&#39;</span><span class="p">,</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">,</span><span class="s1">&#39;energy&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span>\
                                 <span class="s1">&#39;mode&#39;</span><span class="p">,</span><span class="s1">&#39;speechiness&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">,</span><span class="s1">&#39;instrumentalness&#39;</span><span class="p">,</span><span class="s1">&#39;liveness&#39;</span><span class="p">,</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span>\
                                 <span class="s1">&#39;tempo&#39;</span><span class="p">])</span>

<span class="n">all_playlists</span> <span class="o">=</span> <span class="n">all_playlists</span><span class="o">.</span><span class="n">astype</span><span class="p">({</span><span class="s1">&#39;user&#39;</span><span class="p">:</span><span class="s1">&#39;string&#39;</span><span class="p">,</span><span class="s1">&#39;track name&#39;</span><span class="p">:</span><span class="s1">&#39;string&#39;</span><span class="p">,</span><span class="s1">&#39;artist&#39;</span><span class="p">:</span><span class="s1">&#39;string&#39;</span><span class="p">,</span><span class="s1">&#39;popularity&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span>\
                        <span class="s1">&#39;energy&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;mode&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span>\
                        <span class="s1">&#39;speechiness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span>\
                        <span class="s1">&#39;instrumentalness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;liveness&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span> \
                        <span class="s1">&#39;valence&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">:</span><span class="s1">&#39;float64&#39;</span><span class="p">})</span>

<span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">stored_playlists</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
  <span class="n">v</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
  <span class="n">all_playlists</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">all_playlists</span><span class="p">,</span><span class="n">v</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">sc</span> <span class="o">=</span> <span class="n">MinMaxScaler</span><span class="p">(</span><span class="n">feature_range</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> 
<span class="n">all_playlists</span><span class="p">[[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">]]</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">all_playlists</span><span class="p">[[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">]])</span>
<span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">stored_playlists</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
  <span class="n">v</span><span class="p">[[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">]]</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">v</span><span class="p">[[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">]])</span>
  <span class="n">stored_playlists</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">=</span> <span class="n">v</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">all_playlists</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Audio-feature-box-plots">Audio feature box plots<a class="anchor-link" href="#Audio-feature-box-plots">&#182;</a></h3>
</div>
</div>
</div>
<img src="/assets/img/Audio.png">
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Spotify provides these audio features in order to better understand the underlying data of audio tracks. We've created box plots in order to gauge the distribution of audio features.</p>
<p>From this plot, we can see that in the playlists provided we have high popularity, energy, danceabililty, and loudness, and low acousticness, liveness, and speechiness. There is a distributed range of tempo and valence for the songs.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">,</span><span class="s1">&#39;energy&#39;</span><span class="p">,</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">,</span><span class="s1">&#39;liveness&#39;</span><span class="p">,</span><span class="s1">&#39;speechiness&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">]</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">col</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">columns</span><span class="p">):</span>
  <span class="n">fig</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">go</span><span class="o">.</span><span class="n">Box</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">all_playlists</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">all_playlists</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="n">boxpoints</span><span class="o">=</span><span class="s1">&#39;all&#39;</span><span class="p">,</span>\
                       <span class="n">text</span><span class="o">=</span><span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;track name&#39;</span><span class="p">]))</span>

<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
    <span class="n">title_text</span> <span class="o">=</span> <span class="s2">&quot;All Playlists Audio Features&quot;</span><span class="p">,</span>
    <span class="n">showlegend</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
    <span class="n">paper_bgcolor</span> <span class="o">=</span> <span class="s2">&quot;white&quot;</span><span class="p">,</span>
    <span class="n">width</span> <span class="o">=</span> <span class="mi">800</span>
<span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">renderer</span><span class="o">=</span><span class="s1">&#39;notebook&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<img src="/assets/img/features.png">
<p>Context:</p>
<ul>
<li><strong>Popularity</strong>: The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. </li>
<li><strong>Danceability</strong>: How suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.</li>
<li><strong>Energy</strong>: A measure from 0.0 to 1.0 representing a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.</li>
<li><strong>Valence</strong>: A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (happy, cheerful, euphoric), while tracks with low valence sound more negative (sad, depressed, angry).</li>
<li><strong>Tempo</strong>: The overall estimated tempo of a track in beats per minute (BPM). Tempo is the speed or pace of a given piece and derives directly from the average beat duration.</li>
<li><strong>Acousticness</strong>: A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.</li>
<li><strong>Liveness</strong>: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.</li>
<li><strong>Speechiness</strong>: Detects the presence of spoken words in a track. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, values below 0.33 represent non-speech-like tracks.</li>
<li><strong>Loudness</strong>: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). </li>
</ul>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="User-Radio-Graphs">User Radio Graphs<a class="anchor-link" href="#User-Radio-Graphs">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In order to compare playlists to one another, we've aggregated the audio features to display on radio graphs.<br>
The graphs display the average audio features for each user's playlist and give insight into the type of music that they like. In analyzing these graphs, we roughly decipher what users like similar music, and also how music tastes differ.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">graph</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;cristinC_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;haleyS_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;mehulG_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;samH_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;architM_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;top_songs_global&#39;</span><span class="p">,</span><span class="s1">&#39;level_up&#39;</span><span class="p">,</span><span class="s1">&#39;callyL_playlist&#39;</span><span class="p">]</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s1">&#39;type&#39;</span><span class="p">:</span> <span class="s1">&#39;polar&#39;</span><span class="p">}]</span><span class="o">*</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>

<span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;mediumseagreen&quot;</span><span class="p">,</span><span class="s2">&quot;darkorange&quot;</span><span class="p">,</span><span class="s2">&quot;mediumpurple&quot;</span><span class="p">,</span><span class="s2">&quot;magenta&quot;</span><span class="p">,</span><span class="s2">&quot;limegreen&quot;</span><span class="p">,</span><span class="s2">&quot;gold&quot;</span><span class="p">,</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span><span class="s2">&quot;green&quot;</span><span class="p">,</span><span class="s2">&quot;red&quot;</span><span class="p">,</span><span class="s2">&quot;yellow&quot;</span><span class="p">]</span>
<span class="n">placement</span> <span class="o">=</span> <span class="p">[[],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">]]</span>

<span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">name</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>

    <span class="n">temp</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">stored_playlists</span><span class="p">[</span><span class="n">name</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">,</span><span class="s1">&#39;energy&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">,</span><span class="s1">&#39;speechiness&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">])</span>    
    <span class="n">fig</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span>
        <span class="n">go</span><span class="o">.</span><span class="n">Scatterpolar</span><span class="p">(</span>
            <span class="n">r</span><span class="o">=</span><span class="n">temp</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
            <span class="n">theta</span><span class="o">=</span><span class="n">temp</span><span class="o">.</span><span class="n">columns</span><span class="p">,</span>
            <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;toself&#39;</span><span class="p">,</span>
            <span class="n">name</span><span class="o">=</span> <span class="n">name</span><span class="p">,</span> 
            <span class="n">fillcolor</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">n</span><span class="p">],</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
            <span class="p">),</span> <span class="n">row</span><span class="o">=</span><span class="n">placement</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">col</span><span class="o">=</span><span class="n">placement</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
    
<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">polar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar2</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar3</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar4</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar5</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar6</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar7</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar8</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">paper_bgcolor</span> <span class="o">=</span> <span class="s2">&quot;white&quot;</span><span class="p">)</span>

<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">title_text</span><span class="o">=</span><span class="s2">&quot;Playlist Audio Features&quot;</span><span class="p">,</span><span class="n">showlegend</span><span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">renderer</span><span class="o">=</span><span class="s1">&#39;notebook&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We can look at the same data conveyed on one radar chart where you can also filter to look at specific users.</p>
<p>This graph makes it easier to compare two playlist at once, and also gives a good overview of all the playlist stacked on top of eachother.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">()</span>

<span class="n">graph</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;cristinC_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;haleyS_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;samH_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;jennaS_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;natalieH_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;top_songs_global&#39;</span><span class="p">,</span><span class="s1">&#39;mehulG_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;huseinH_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;level_up&#39;</span><span class="p">,</span><span class="s1">&#39;callyL_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;get_turnt&#39;</span><span class="p">,</span><span class="s1">&#39;mellow_bars&#39;</span><span class="p">,</span><span class="s1">&#39;new_music_friday&#39;</span><span class="p">,</span><span class="s1">&#39;rap_caviar&#39;</span><span class="p">,</span><span class="s1">&#39;pop_all_day&#39;</span><span class="p">,</span><span class="s1">&#39;songs_to_sing_in_the_car&#39;</span><span class="p">]</span>
<span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;maroon&quot;</span><span class="p">,</span><span class="s2">&quot;rosybrown&quot;</span><span class="p">,</span><span class="s2">&quot;mediumseagreen&quot;</span><span class="p">,</span><span class="s2">&quot;darkorange&quot;</span><span class="p">,</span><span class="s2">&quot;mediumpurple&quot;</span><span class="p">,</span><span class="s2">&quot;magenta&quot;</span><span class="p">,</span><span class="s2">&quot;limegreen&quot;</span><span class="p">,</span><span class="s2">&quot;gold&quot;</span><span class="p">,</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span><span class="s2">&quot;yellow&quot;</span><span class="p">,</span><span class="s2">&quot;red&quot;</span><span class="p">,</span><span class="s2">&quot;purple&quot;</span><span class="p">,</span><span class="s2">&quot;gold&quot;</span><span class="p">,</span><span class="s2">&quot;green&quot;</span><span class="p">,</span><span class="s2">&quot;orange&quot;</span><span class="p">,</span><span class="s2">&quot;pink&quot;</span><span class="p">,</span><span class="s2">&quot;cyan&quot;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">name</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>

    <span class="n">temp</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">stored_playlists</span><span class="p">[</span><span class="n">name</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">,</span><span class="s1">&#39;energy&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">,</span><span class="s1">&#39;speechiness&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">])</span>    
    <span class="n">fig</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span>
        <span class="n">go</span><span class="o">.</span><span class="n">Scatterpolargl</span><span class="p">(</span>
            <span class="n">r</span><span class="o">=</span><span class="n">temp</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
            <span class="n">theta</span><span class="o">=</span><span class="n">temp</span><span class="o">.</span><span class="n">columns</span><span class="p">,</span>
            <span class="n">name</span><span class="o">=</span> <span class="n">name</span><span class="p">,</span> 
            <span class="n">marker</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[</span><span class="n">n</span><span class="p">])))</span>

<span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s2">&quot;markers&quot;</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">line_color</span><span class="o">=</span><span class="s1">&#39;white&#39;</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">))</span>

<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s2">&quot;Playlist Audio Features&quot;</span><span class="p">,</span>
    <span class="n">font_size</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span>
    <span class="n">showlegend</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
    <span class="n">paper_bgcolor</span> <span class="o">=</span> <span class="s2">&quot;white&quot;</span>
<span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">polar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar2</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar3</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar4</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar5</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar6</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar7</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar8</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">polar9</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">radialaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span><span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],),),</span>
    <span class="n">width</span> <span class="o">=</span> <span class="mi">800</span>
<span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">renderer</span><span class="o">=</span><span class="s1">&#39;notebook&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<img src="/assets/img/allplay.png">
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Correlation-Graphs">Correlation Graphs<a class="anchor-link" href="#Correlation-Graphs">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Visualize the correlations between different audio features.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">scatter_df</span> <span class="o">=</span> <span class="n">all_playlists</span><span class="p">[[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">,</span><span class="s1">&#39;energy&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">,</span><span class="s1">&#39;speechiness&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">]]</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">scatter_matrix</span><span class="p">(</span><span class="n">scatter_df</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">renderer</span><span class="o">=</span><span class="s1">&#39;notebook&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<img src="/assets/img/correlation.png">
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There's a high positive correlation between 'energy' - 'loudness' and a high negative correlation between 'energy' and 'acousticness'. We'll look at this in more detail below.</p>

</div>
</div>
</div>
<img src="/assets/img/heat.png">
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">density_heatmap</span><span class="p">(</span><span class="n">all_playlists</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;energy&#39;</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;loudness&#39;</span><span class="p">],</span> <span class="n">nbinsx</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">nbinsy</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span><span class="n">color_continuous_scale</span><span class="o">=</span><span class="s2">&quot;YlGnBu&quot;</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">renderer</span><span class="o">=</span><span class="s1">&#39;notebook&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Clustering-song-features">Clustering song features<a class="anchor-link" href="#Clustering-song-features">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We can cluster song features together using K-means and visualize with TSNE. These clusters of songs are our own created genres.</p>
<p>This tells us what songs are the most alike to one another. The genres aren't explicitly defined as 'pop' or 'rap' but rather are a collection of songs with the same audio features, and may very well fall into the same genres.</p>
<p>Dash is an interactive feature of plotly used to create interactive dashboards. In this case, we're using dash in order to visualize the songs with different numbers of clusters and in different dimensions.</p>
<p>First, we create dropdowns to configure the graph functionality.</p>
<p>Then, in the "update graph" portion, we configure how we are going to display the graph. Because we are changing the clustering or dimensionality when we change the values in the dropdown, we recompute the k-means pipeline here.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">app</span> <span class="o">=</span> <span class="n">JupyterDash</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">layout</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">Div</span><span class="p">([</span>
    <span class="n">html</span><span class="o">.</span><span class="n">Div</span><span class="p">([</span>
        <span class="n">html</span><span class="o">.</span><span class="n">Div</span><span class="p">([</span><span class="n">dcc</span><span class="o">.</span><span class="n">Dropdown</span><span class="p">(</span>
            <span class="n">options</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;2&#39;</span><span class="p">:</span> <span class="s1">&#39;2 dimensions&#39;</span><span class="p">,</span><span class="s1">&#39;3&#39;</span><span class="p">:</span> <span class="s1">&#39;3 dimensions&#39;</span><span class="p">},</span>
              <span class="n">value</span><span class="o">=</span><span class="s1">&#39;2&#39;</span><span class="p">,</span>
              <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;dimensions&#39;</span>
            <span class="p">)]),</span> <span class="c1">#style={&#39;width&#39;: &#39;48%&#39;, &#39;display&#39;: &#39;inline-block&#39;}),</span>
        <span class="n">html</span><span class="o">.</span><span class="n">Div</span><span class="p">([</span><span class="n">dcc</span><span class="o">.</span><span class="n">Dropdown</span><span class="p">(</span>
            <span class="n">options</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;2&#39;</span><span class="p">:</span> <span class="s1">&#39;2 clusters&#39;</span><span class="p">,</span><span class="s1">&#39;3&#39;</span><span class="p">:</span> <span class="s1">&#39;3 clusters&#39;</span><span class="p">,</span><span class="s1">&#39;4&#39;</span><span class="p">:</span> <span class="s1">&#39;4 clusters&#39;</span><span class="p">,</span><span class="s1">&#39;5&#39;</span><span class="p">:</span><span class="s1">&#39;5 clusters&#39;</span><span class="p">,</span><span class="s1">&#39;6&#39;</span><span class="p">:</span><span class="s1">&#39;6 clusters&#39;</span><span class="p">},</span>
              <span class="n">value</span><span class="o">=</span><span class="s1">&#39;3&#39;</span><span class="p">,</span>
              <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;clusters&#39;</span>
            <span class="p">)]),</span> <span class="c1">#style={&#39;width&#39;: &#39;48%&#39;, &#39;display&#39;: &#39;inline-block&#39;}),</span>
    <span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;indicator-graphic&#39;</span><span class="p">),]),])</span>

<span class="nd">@app</span><span class="o">.</span><span class="n">callback</span><span class="p">(</span><span class="n">Output</span><span class="p">(</span><span class="s1">&#39;indicator-graphic&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">),[</span><span class="n">Input</span><span class="p">(</span><span class="s1">&#39;dimensions&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">),</span><span class="n">Input</span><span class="p">(</span><span class="s1">&#39;clusters&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">)])</span>

<span class="k">def</span> <span class="nf">update_graph</span><span class="p">(</span><span class="n">dimensions</span><span class="p">,</span> <span class="n">clusters</span><span class="p">):</span>
  <span class="n">dimensions</span> <span class="o">=</span> <span class="n">dimensions</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
  <span class="n">clusters</span> <span class="o">=</span> <span class="n">clusters</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

  <span class="n">cluster_pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([(</span><span class="s1">&#39;scaler&#39;</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span> <span class="p">(</span><span class="s1">&#39;kmeans&#39;</span><span class="p">,</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">clusters</span><span class="p">)))])</span>
  <span class="n">X</span> <span class="o">=</span> <span class="n">all_playlists</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">number</span><span class="p">)</span>
  <span class="n">cluster_pipeline</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
  <span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cluster_pipeline</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

  <span class="n">tsne_pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([(</span><span class="s1">&#39;scaler&#39;</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span> <span class="p">(</span><span class="s1">&#39;tsne&#39;</span><span class="p">,</span> <span class="n">TSNE</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">dimensions</span><span class="p">),</span> <span class="n">verbose</span><span class="o">=</span> <span class="kc">False</span><span class="p">))])</span>
  <span class="n">genre_embedding</span> <span class="o">=</span> <span class="n">tsne_pipeline</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

  <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">dimensions</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
    <span class="n">projection</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">],</span> <span class="n">data</span><span class="o">=</span><span class="n">genre_embedding</span><span class="p">)</span>
    <span class="n">projection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;cluster&#39;</span><span class="p">,</span> <span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span> 
    <span class="n">projection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;track name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span> 
    <span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">projection</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span><span class="n">y</span> <span class="o">=</span> <span class="n">projection</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">],</span>\
    <span class="n">mode</span> <span class="o">=</span> <span class="s1">&#39;markers&#39;</span><span class="p">,</span><span class="n">marker</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">projection</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">],</span><span class="n">colorscale</span><span class="o">=</span><span class="s1">&#39;Viridis&#39;</span><span class="p">))])</span>
  <span class="k">elif</span> <span class="nb">int</span><span class="p">(</span><span class="n">dimensions</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
    <span class="n">projection</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span><span class="s1">&#39;z&#39;</span><span class="p">],</span> <span class="n">data</span><span class="o">=</span><span class="n">genre_embedding</span><span class="p">)</span>
    <span class="n">projection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;cluster&#39;</span><span class="p">,</span> <span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span> 
    <span class="n">projection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;track name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span> 
    <span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter3d</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">projection</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span><span class="n">y</span> <span class="o">=</span> <span class="n">projection</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">],</span><span class="n">z</span><span class="o">=</span><span class="n">projection</span><span class="p">[</span><span class="s1">&#39;z&#39;</span><span class="p">],</span>\
    <span class="n">mode</span> <span class="o">=</span> <span class="s1">&#39;markers&#39;</span><span class="p">,</span><span class="n">marker</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">projection</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">],</span><span class="n">colorscale</span><span class="o">=</span><span class="s1">&#39;Viridis&#39;</span><span class="p">))])</span>
  <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">hovertemplate</span><span class="o">=</span><span class="n">projection</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">fig</span>

<span class="n">app</span><span class="o">.</span><span class="n">run_server</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;inline&#39;</span><span class="p">,</span><span class="n">debug</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<img src="/assets/img/dash.gif">
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Content-based-recommendation-system">Content-based recommendation system<a class="anchor-link" href="#Content-based-recommendation-system">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In our corpus of songs, you can recommend songs based on what your friends like.</p>
<p>First, we calculate the means of each vector of audio features for the center. Then, using cosine similarity we find the top closest songs.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">users</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;cristinC_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;haleyS_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;callyL_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;samH_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;jennaS_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;natalieH_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;architM_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;mehulG_playlist&#39;</span><span class="p">,</span><span class="s1">&#39;huseinH_playlist&#39;</span><span class="p">,</span>\
         <span class="s1">&#39;top_songs_global&#39;</span><span class="p">,</span><span class="s1">&#39;get_turnt&#39;</span><span class="p">,</span><span class="s1">&#39;mellow_bars&#39;</span><span class="p">,</span><span class="s1">&#39;new_music_friday&#39;</span><span class="p">,</span><span class="s1">&#39;rap_caviar&#39;</span><span class="p">,</span><span class="s1">&#39;pop_all_day&#39;</span><span class="p">,</span><span class="s1">&#39;songs_to_sing_in_the_car&#39;</span><span class="p">,</span><span class="s1">&#39;level_up&#39;</span><span class="p">]</span>
<span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;popularity&#39;</span><span class="p">,</span><span class="s1">&#39;danceability&#39;</span><span class="p">,</span><span class="s1">&#39;energy&#39;</span><span class="p">,</span><span class="s1">&#39;loudness&#39;</span><span class="p">,</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span><span class="s1">&#39;tempo&#39;</span><span class="p">,</span><span class="s1">&#39;speechiness&#39;</span><span class="p">,</span><span class="s1">&#39;acousticness&#39;</span><span class="p">,</span><span class="s1">&#39;instrumentalness&#39;</span><span class="p">,</span><span class="s1">&#39;liveness&#39;</span><span class="p">,</span><span class="s1">&#39;mode&#39;</span><span class="p">,</span><span class="s1">&#39;key&#39;</span><span class="p">]</span>
<span class="n">user_means</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">columns</span><span class="p">)))</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">user</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">users</span><span class="p">):</span>
  <span class="n">temp</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">all_playlists</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">user</span><span class="p">][</span><span class="n">columns</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">(),</span><span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
  <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">columns</span><span class="p">)))</span>
  <span class="n">user_means</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">user_means</span><span class="p">,</span><span class="n">temp</span><span class="p">))</span>

<span class="n">cluster_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">user_means</span><span class="p">)</span>
<span class="n">cluster_df</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span><span class="o">=</span><span class="n">users</span>
</pre></div>

    </div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">get_recs</span><span class="p">(</span><span class="n">user_center</span><span class="p">,</span><span class="n">user_name</span><span class="p">,</span><span class="n">all_playlists</span><span class="p">):</span>
  <span class="n">current_songs</span> <span class="o">=</span> <span class="n">all_playlists</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_playlists</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_name</span><span class="p">][</span><span class="s1">&#39;track name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
  <span class="n">current_songs</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">current_songs</span><span class="p">}</span>

  <span class="n">distances</span> <span class="o">=</span> <span class="n">cdist</span><span class="p">(</span><span class="n">user_center</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">all_playlists</span><span class="p">[</span><span class="n">columns</span><span class="p">],</span> <span class="s1">&#39;cosine&#39;</span><span class="p">)</span>
  <span class="n">index</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">distances</span><span class="p">)[:,:</span><span class="mi">50</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">recs</span> <span class="o">=</span> <span class="n">all_playlists</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>

  <span class="n">song_recs</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">recs</span><span class="p">[</span><span class="s1">&#39;track name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">current_songs</span><span class="p">:</span>
      <span class="n">song_recs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">song_recs</span><span class="p">))[:</span><span class="mi">10</span><span class="p">]</span>

<span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">user</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">user_means</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>
      <span class="k">break</span>
    <span class="n">recs</span> <span class="o">=</span> <span class="n">get_recs</span><span class="p">(</span><span class="n">user</span><span class="p">,</span><span class="n">users</span><span class="p">[</span><span class="n">n</span><span class="p">],</span><span class="n">all_playlists</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">users</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">recs</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>cristinC
[&#39;You and Tequila (feat. Grace Potter)&#39;, &#39;Hurt Somebody (With Julia Michaels)&#39;, &#39;Atlanta Girls&#39;, &#39;goosebumps&#39;, &#39;Hate The Other Side (with Marshmello &amp; The Kid Laroi)&#39;, &#39;Ruin My Life&#39;, &#39;Sunshine (feat. Lil Wayne &amp; Childish Gambino)&#39;, &#39;Leave Me Alone&#39;, &#39;good 4 u&#39;, &#39;Un Coco&#39;]

haleyS
[&#39;feeling this bad (v2)&#39;, &#39;Yo Yo&#39;, &#39;Hate The Other Side (with Marshmello &amp; The Kid Laroi)&#39;, &#39;Sunshine (feat. Lil Wayne &amp; Childish Gambino)&#39;, &#39;No Gold Teeth&#39;, &#39;Leave Me Alone&#39;, &#39;We Are Never Ever Getting Back Together&#39;, &#39;Blank Space&#39;, &#39;Alright&#39;, &#39;Little Dance&#39;]

callyL
[&#39;You and Tequila (feat. Grace Potter)&#39;, &#39;Hurt Somebody (With Julia Michaels)&#39;, &#39;Heavy (with Lil Uzi Vert)&#39;, &#39;abcdefu&#39;, &#39;goosebumps&#39;, &#39;Atlanta Girls&#39;, &#39;Leave Me Alone&#39;, &#39;good 4 u&#39;, &#39;Alright&#39;, &#39;Un Coco&#39;]

samH
[&#39;CHAMPAGNE&#39;, &#39;Yo Yo&#39;, &#39;Famous&#39;, &#39;feeling this bad (v2)&#39;, &#39;goosebumps&#39;, &#39;Just like Heaven&#39;, &#39;Everybody Talks&#39;, &#39;Leave Me Alone&#39;, &#39;Meteorite&#39;, &#39;Satellite&#39;]

jennaS
[&#39;You and Tequila (feat. Grace Potter)&#39;, &#39;Hurt Somebody (With Julia Michaels)&#39;, &#39;Heavy (with Lil Uzi Vert)&#39;, &#39;abcdefu&#39;, &#39;goosebumps&#39;, &#39;fingers crossed&#39;, &#39;Hate The Other Side (with Marshmello &amp; The Kid Laroi)&#39;, &#39;good 4 u&#39;, &#39;KEEP IT UP&#39;, &#39;Without Me&#39;]

natalieH
[&#39;CHAMPAGNE&#39;, &#39;Famous&#39;, &#39;goosebumps&#39;, &#39;Everybody Talks&#39;, &#39;Nice For What&#39;, &#39;Leave Me Alone&#39;, &#39;Acapulco&#39;, &#39;Blank Space&#39;, &#39;Alright&#39;, &#39;Shout Out to My Ex&#39;]

architM
[&#39;Hurt Somebody (With Julia Michaels)&#39;, &#39;Heavy (with Lil Uzi Vert)&#39;, &#39;feeling this bad (v2)&#39;, &#39;Yo Yo&#39;, &#39;Leave Me Alone&#39;, &#39;Acapulco&#39;, &#39;Blank Space&#39;, &#39;Alright&#39;, &#39;Un Coco&#39;, &#39;Sky&#39;]

mehulG
[&#39;Heavy (with Lil Uzi Vert)&#39;, &#39;feeling this bad (v2)&#39;, &#39;abcdefu&#39;, &#39;Acapulco&#39;, &#39;Blank Space&#39;, &#39;Shout Out to My Ex&#39;, &#39;Un Coco&#39;, &#39;Sky&#39;, &#39;El Apagón&#39;, &#39;PUFFIN ON ZOOTIEZ&#39;]

huseinH
[&#39;You and Tequila (feat. Grace Potter)&#39;, &#39;Hurt Somebody (With Julia Michaels)&#39;, &#39;feeling this bad (v2)&#39;, &#39;Yo Yo&#39;, &#39;Atlanta Girls&#39;, &#39;abcdefu&#39;, &#39;Hate The Other Side (with Marshmello &amp; The Kid Laroi)&#39;, &#39;Sunshine (feat. Lil Wayne &amp; Childish Gambino)&#39;, &#39;Leave Me Alone&#39;, &#39;Blank Space&#39;]

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For conciseness, we output the top 10 songs recommended to each user's playlist. By audio feature, these songs are all very similar to the audio features of the playlist.</p>
<p>The best 'true' metric of success in deciding if these recommendations are accurate or not is to input your own playlist and listen to our recommendations! The fun feature about these recommendations is that they are songs that your friends listen to.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Playlist-Similarity">Playlist Similarity<a class="anchor-link" href="#Playlist-Similarity">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In addition to finding new tracks based on playlist features, we can also figure out what playlists are most similar to one another.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">similar_playlists</span><span class="p">(</span><span class="n">user_center</span><span class="p">,</span><span class="n">user_name</span><span class="p">,</span><span class="n">user_means</span><span class="p">,</span><span class="n">users</span><span class="p">):</span>

  <span class="n">distances</span> <span class="o">=</span> <span class="n">cdist</span><span class="p">(</span><span class="n">user_center</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">user_means</span><span class="p">,</span> <span class="s1">&#39;cosine&#39;</span><span class="p">)</span>
  <span class="n">index</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">distances</span><span class="p">)[:,:</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">recs</span> <span class="o">=</span> <span class="p">[</span><span class="n">users</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">index</span><span class="p">]</span>

  <span class="n">similar_users</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">recs</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">user_name</span><span class="p">:</span>
      <span class="n">similar_users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">similar_users</span><span class="p">))[:</span><span class="mi">10</span><span class="p">]</span>

<span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">user</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">user_means</span><span class="p">):</span>
    <span class="n">similar_users</span> <span class="o">=</span> <span class="n">similar_playlists</span><span class="p">(</span><span class="n">user</span><span class="p">,</span><span class="n">users</span><span class="p">[</span><span class="n">n</span><span class="p">],</span><span class="n">user_means</span><span class="p">,</span><span class="n">users</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">users</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">similar_users</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>cristinC_playlist
[&#39;jennaS_playlist&#39;, &#39;new_music_friday&#39;, &#39;huseinH_playlist&#39;]

haleyS_playlist
[&#39;new_music_friday&#39;, &#39;songs_to_sing_in_the_car&#39;, &#39;huseinH_playlist&#39;]

callyL_playlist
[&#39;architM_playlist&#39;, &#39;cristinC_playlist&#39;, &#39;mehulG_playlist&#39;]

samH_playlist
[&#39;natalieH_playlist&#39;, &#39;new_music_friday&#39;, &#39;songs_to_sing_in_the_car&#39;]

jennaS_playlist
[&#39;cristinC_playlist&#39;, &#39;callyL_playlist&#39;, &#39;huseinH_playlist&#39;]

natalieH_playlist
[&#39;pop_all_day&#39;, &#39;songs_to_sing_in_the_car&#39;, &#39;samH_playlist&#39;]

architM_playlist
[&#39;level_up&#39;, &#39;mehulG_playlist&#39;, &#39;get_turnt&#39;]

mehulG_playlist
[&#39;architM_playlist&#39;, &#39;rap_caviar&#39;, &#39;level_up&#39;]

huseinH_playlist
[&#39;haleyS_playlist&#39;, &#39;jennaS_playlist&#39;, &#39;cristinC_playlist&#39;]

top_songs_global
[&#39;rap_caviar&#39;, &#39;pop_all_day&#39;, &#39;mehulG_playlist&#39;]

get_turnt
[&#39;level_up&#39;, &#39;rap_caviar&#39;, &#39;mehulG_playlist&#39;]

mellow_bars
[&#39;architM_playlist&#39;, &#39;level_up&#39;, &#39;get_turnt&#39;]

new_music_friday
[&#39;haleyS_playlist&#39;, &#39;pop_all_day&#39;, &#39;songs_to_sing_in_the_car&#39;]

rap_caviar
[&#39;level_up&#39;, &#39;mehulG_playlist&#39;, &#39;get_turnt&#39;]

pop_all_day
[&#39;new_music_friday&#39;, &#39;songs_to_sing_in_the_car&#39;, &#39;mehulG_playlist&#39;]

songs_to_sing_in_the_car
[&#39;haleyS_playlist&#39;, &#39;pop_all_day&#39;, &#39;new_music_friday&#39;]

level_up
[&#39;architM_playlist&#39;, &#39;mehulG_playlist&#39;, &#39;get_turnt&#39;]

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Above we output the closest three playlists to each playlist. We can also look at similar playlists with k-means clustering.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">cluster_pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([(</span><span class="s1">&#39;scaler&#39;</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span> <span class="p">(</span><span class="s1">&#39;kmeans&#39;</span><span class="p">,</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">6</span><span class="p">))])</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">cluster_df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">number</span><span class="p">)</span>
<span class="n">cluster_pipeline</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">cluster_df</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cluster_pipeline</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

<span class="n">tsne_pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([(</span><span class="s1">&#39;scaler&#39;</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span> <span class="p">(</span><span class="s1">&#39;tsne&#39;</span><span class="p">,</span> <span class="n">TSNE</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">False</span><span class="p">))])</span>
<span class="n">users_embedding</span> <span class="o">=</span> <span class="n">tsne_pipeline</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

<span class="n">projection</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span><span class="s1">&#39;z&#39;</span><span class="p">],</span> <span class="n">data</span><span class="o">=</span><span class="n">users_embedding</span><span class="p">)</span>
<span class="n">projection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;cluster&#39;</span><span class="p">,</span> <span class="n">cluster_df</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span> 
<span class="n">projection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">cluster_df</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span> 
<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="o">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">go</span><span class="o">.</span><span class="n">Scatter3d</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">projection</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span><span class="n">y</span> <span class="o">=</span> <span class="n">projection</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">],</span><span class="n">z</span><span class="o">=</span><span class="n">projection</span><span class="p">[</span><span class="s1">&#39;z&#39;</span><span class="p">],</span>\
<span class="n">mode</span> <span class="o">=</span> <span class="s1">&#39;markers&#39;</span><span class="p">,</span><span class="n">marker</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">projection</span><span class="p">[</span><span class="s1">&#39;cluster&#39;</span><span class="p">],</span><span class="n">colorscale</span><span class="o">=</span><span class="s1">&#39;Viridis&#39;</span><span class="p">))])</span>

<span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">hovertemplate</span><span class="o">=</span><span class="n">projection</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">renderer</span><span class="o">=</span><span class="s1">&#39;notebook&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
<img src="/assets/img/cluster.gif">
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">cluster_df</span><span class="p">[[</span><span class="s1">&#39;user&#39;</span><span class="p">,</span><span class="s1">&#39;cluster&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s1">&#39;cluster&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result"><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user</th>
      <th>cluster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>16</th>
      <td>level_up</td>
      <td>0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>rap_caviar</td>
      <td>0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>get_turnt</td>
      <td>0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>mehulG_playlist</td>
      <td>0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>architM_playlist</td>
      <td>0</td>
    </tr>
    <tr>
      <th>0</th>
      <td>cristinC_playlist</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>jennaS_playlist</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>callyL_playlist</td>
      <td>1</td>
    </tr>
    <tr>
      <th>8</th>
      <td>huseinH_playlist</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>haleyS_playlist</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>samH_playlist</td>
      <td>3</td>
    </tr>
    <tr>
      <th>5</th>
      <td>natalieH_playlist</td>
      <td>3</td>
    </tr>
    <tr>
      <th>15</th>
      <td>songs_to_sing_in_the_car</td>
      <td>4</td>
    </tr>
    <tr>
      <th>9</th>
      <td>top_songs_global</td>
      <td>4</td>
    </tr>
    <tr>
      <th>11</th>
      <td>mellow_bars</td>
      <td>4</td>
    </tr>
    <tr>
      <th>14</th>
      <td>pop_all_day</td>
      <td>4</td>
    </tr>
    <tr>
      <th>12</th>
      <td>new_music_friday</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
</div></div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Looking at these clusters we can gauge their accuracy.</p>
<ul>
<li>Cluster 0: Rap </li>
<li>Cluster 4: Pop</li>
</ul>
<p>The users playlists fit into their own clusters, having similar taste in music.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Conclusion">Conclusion<a class="anchor-link" href="#Conclusion">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Using a spotify listener's playlist and pulling the audio features for every track, we can learn alot about a spotify user and their friends.</p>
<p>In this report, we've discovered how audio features range, how songs cluster together, and how we can use audio features to recommend new songs. We've looked at the specific audio features for a user's playlist to compare a user to other users. This spotify music analysis is interactive and insightful, and can be fit to new data by adding the link to a new playlist.</p>

</div>
</div>
</div>

</body>







</html>
