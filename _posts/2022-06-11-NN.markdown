---
layout: post
title: Neural Network
description: The model implements an image classification system using a single hidden layer neural network with Adagrad, a variant of stochastic gradient descent. The neural net creates an optical character recognizer with sigmoid activations and softmax output. 
img: pics.jpg # Add image post (optional)
tags: [ML, NeuralNetwork]
---

<html>
  
 <style type="text/css">
  pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.highlight .hll { background-color: #ffffcc }
.highlight { background: #f8f8f8; }
.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #9C6500 } /* Comment.Preproc */
.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */
.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #E40000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #008400 } /* Generic.Inserted */
.highlight .go { color: #717171 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #687822 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #767600 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #666666 } /* Literal.Number.Bin */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sa { color: #BA2121 } /* Literal.String.Affix */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #A45A77 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #0000FF } /* Name.Function.Magic */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .vm { color: #19177C } /* Name.Variable.Magic */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>
 
<head><meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>NN</title><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
  
  
<!-- Load mathjax -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"> </script>
    <!-- MathJax configuration -->
    <script type="text/x-mathjax-config">
    init_mathjax = function() {
        if (window.MathJax) {
        // MathJax loaded
            MathJax.Hub.Config({
                TeX: {
                    equationNumbers: {
                    autoNumber: "AMS",
                    useLabelIds: true
                    }
                },
                tex2jax: {
                    inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                    displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
                    processEscapes: true,
                    processEnvironments: true
                },
                displayAlign: 'center',
                CommonHTML: {
                    linebreaks: {
                    automatic: true
                    }
                }
            });

            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        }
    }
    init_mathjax();
    </script>
    <!-- End of mathjax configuration --></head>
<body>

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="Neural-Network">Neural Network<a class="anchor-link" href="#Neural-Network">&#182;</a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The model implements an image classification system using a single hidden layer neural network with Adagrad, a variant of stochastic gradient descent. The neural net creates an optical character recognizer with sigmoid activations and softmax output. The program learns the parameters of the model on the training data, reports the cross-entropy at the end of each epoch on both train and validation data, and at the end of training writes out predictions and error rates. Adagrad works to implicitly change the step size based on the shape of the function inferred from the gradients.</p>
  
<p>The dataset used is a subset of a standard Computer Vision dataset, CIFAR-10. This data includes color im-
ages of various vehicles and animals; the subset includes black and white images of the 4 classes automobile,
bird, frog, ship. </p>
  
<img src="/assets/img/cifar.png" style="max-width:300px;width:100%">
 
<p>The model implements a single-hidden-layer neural network with a sigmoid activation function for the
hidden layer, and a softmax on the output layer. Let the input vectors x be of length M , and the hidden layer
z consist of D hidden units. In addition, let the output layer ˆy be a probability distribution over K classes.
That is, each element ˆyk of the output vector represents the probability of x belonging to the class k. </p>

<img src="/assets/img/math1.png" style="max-width:200px;width:100%">
  
<p>The model can be compacted by assuming that x0 = 1 is a bias feature on the input and that z0 = 1 is also
fixed.</p>

<img src="/assets/img/math2.png" style="max-width:150px;width:100%">
  
<p>The objective function for training the neural network is the average cross entropy over the training dataset. The objective function is optimized during training using stochastic gradient descent (SGD), where the gradient of the parameters for each training example is computed via backpropagation.</p>
  
<img src="/assets/img/math3.png" style="max-width:250px;width:100%">
  
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-python"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">train_input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">validation_input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">train_out</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="n">validation_out</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="n">metrics_out</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
<span class="n">num_epoch</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span>
<span class="n">hidden_units</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span>
<span class="n">init_flag</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span>
<span class="n">learning_rate</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">erate</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span><span class="n">outlabels</span><span class="p">):</span>

    <span class="n">wrong_count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">outlabels</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">wrong_count</span> <span class="o">+=</span><span class="mi">1</span>
    
    <span class="n">error_rate</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">wrong_count</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
    <span class="n">error_rate</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">{:.6f}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">error_rate</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">error_rate</span>

<span class="k">def</span> <span class="nf">backward</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">learnrate</span><span class="p">,</span><span class="n">sbeta</span><span class="p">,</span><span class="n">salpha</span><span class="p">):</span>

    <span class="nb">input</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="nb">input</span> <span class="o">=</span> <span class="nb">input</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">input</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">alphaw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">upA</span><span class="p">)</span>
    <span class="n">betaw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">upB</span><span class="p">)</span>

    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">alphaw</span><span class="p">)</span>

    <span class="n">z</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">a</span><span class="p">))</span>
    <span class="n">zw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">zw</span><span class="p">,</span><span class="n">betaw</span><span class="p">)</span>
    <span class="n">yhat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>

    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">yhat</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">labels</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">yhat</span><span class="p">)))</span>

    <span class="c1"># Beta</span>
    <span class="n">dl_db</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">yhat</span><span class="o">-</span><span class="n">labels</span><span class="p">)</span> 
    <span class="n">dl_dbeta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">dl_db</span><span class="p">,</span><span class="n">zw</span><span class="p">)</span>

    <span class="n">betaw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">betaw</span><span class="p">)</span>

    <span class="c1"># z</span>
    <span class="n">beta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">betaw</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">dl_dz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">dl_db</span><span class="p">),</span><span class="n">beta</span><span class="p">)</span>

    <span class="c1"># a</span>
    <span class="n">dz_da</span> <span class="o">=</span> <span class="n">z</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">z</span><span class="p">)</span>
    <span class="n">dl_da</span> <span class="o">=</span> <span class="p">(</span><span class="n">dl_dz</span><span class="p">)</span><span class="o">*</span><span class="n">dz_da</span>

    <span class="c1"># alpha </span>
    <span class="n">dl_dalpha</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">dl_da</span><span class="p">),</span><span class="nb">input</span><span class="p">)</span>

    <span class="c1"># beta update</span>
    <span class="n">sbeta</span> <span class="o">=</span> <span class="n">sbeta</span> <span class="o">+</span> <span class="n">dl_dbeta</span><span class="o">**</span><span class="mi">2</span>
    <span class="n">upB</span> <span class="o">=</span> <span class="n">betaw</span> <span class="o">-</span> <span class="p">((</span><span class="n">learnrate</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">sbeta</span><span class="o">+</span><span class="mf">1e-5</span><span class="p">))</span><span class="o">*</span><span class="n">dl_dbeta</span><span class="p">)</span>

    <span class="c1"># alpha update</span>
    <span class="n">salpha</span> <span class="o">=</span> <span class="n">salpha</span> <span class="o">+</span> <span class="n">dl_dalpha</span><span class="o">**</span><span class="mi">2</span>
    <span class="n">upA</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">alphaw</span><span class="p">)</span> <span class="o">-</span> <span class="p">((</span><span class="n">learnrate</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">salpha</span><span class="o">+</span><span class="mf">1e-5</span><span class="p">))</span><span class="o">*</span><span class="n">dl_dalpha</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">upB</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">sbeta</span><span class="p">,</span><span class="n">salpha</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">loss</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">hidden_units</span><span class="p">,</span><span class="nb">input</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">init_flag</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">init_flag</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">alpha</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="n">low</span><span class="o">=-</span><span class="mf">0.1</span><span class="p">,</span><span class="n">high</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>\
            <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">hidden_units</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="nb">input</span><span class="p">[</span><span class="mi">0</span><span class="p">])))</span>
        <span class="n">beta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="n">low</span><span class="o">=-</span><span class="mf">0.1</span><span class="p">,</span><span class="n">high</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>\
            <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="n">hidden_units</span><span class="p">))</span>
    <span class="k">elif</span> <span class="n">init_flag</span> <span class="o">==</span><span class="mi">2</span><span class="p">:</span>
        <span class="n">alpha</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">hidden_units</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="nb">input</span><span class="p">[</span><span class="mi">0</span><span class="p">])))</span>
        <span class="n">beta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="n">hidden_units</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">alpha</span><span class="p">,</span><span class="n">beta</span>

<span class="k">def</span> <span class="nf">CEloss</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">):</span>
    <span class="n">bigloss</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
        <span class="nb">input</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

        <span class="nb">input</span> <span class="o">=</span> <span class="nb">input</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">input</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="n">alphaw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">upA</span><span class="p">)</span>
        <span class="n">betaw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">upB</span><span class="p">)</span>

        <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">alphaw</span><span class="p">)</span>

        <span class="n">z</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">a</span><span class="p">))</span>
        <span class="n">zw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">zw</span><span class="p">,</span><span class="n">betaw</span><span class="p">)</span>
        <span class="n">yhat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>

        <span class="n">loss</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">yhat</span><span class="p">)))</span>
        <span class="n">bigloss</span> <span class="o">+=</span> <span class="n">loss</span>

    <span class="n">ans</span> <span class="o">=</span> <span class="n">bigloss</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ans</span>

<span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">,</span><span class="n">num_epoch</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">learnrate</span><span class="p">,</span><span class="n">inputv</span><span class="p">,</span><span class="n">labelsv</span><span class="p">):</span>
    <span class="n">sbeta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">upB</span><span class="p">)</span>
    <span class="n">salpha</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">upA</span><span class="p">)</span>
    <span class="n">cross</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">emp</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">emptrain</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_epoch</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">input</span><span class="p">)):</span>
            <span class="n">upB</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">sbeta</span><span class="p">,</span><span class="n">salpha</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">loss</span> <span class="o">=</span> <span class="n">backward</span><span class="p">(</span><span class="nb">input</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">,</span><span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">learnrate</span><span class="p">,</span><span class="n">sbeta</span><span class="p">,</span><span class="n">salpha</span><span class="p">)</span>
            <span class="c1">#if i &lt;10:</span>
                <span class="c1">#print(&#39;update&#39;,i+1,&#39;Beta&#39;)</span>
                <span class="c1">#print(upB,&#39;\n&#39;)</span>
                <span class="c1">#print(&#39;update&#39;,i+1,&#39;Alpha&#39;)</span>
                <span class="c1">#print(upA,&#39;\n&#39;)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="n">CEloss</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">)</span>
        <span class="n">ans2</span> <span class="o">=</span> <span class="n">CEloss</span><span class="p">(</span><span class="n">inputv</span><span class="p">,</span><span class="n">labelsv</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">)</span>
        <span class="n">cross</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;epoch=&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39; crossentropy(train): &#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>\
            <span class="s1">&#39;epoch=&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39; crossentropy(validation): &#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">ans2</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
        <span class="c1">#emp.append(str(ans2)+&#39;\n&#39;)</span>
        <span class="c1">#emptrain.append(str(ans)+&#39;\n&#39;)</span>
    <span class="k">return</span> <span class="n">upB</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">cross</span><span class="p">,</span><span class="n">emp</span><span class="p">,</span><span class="n">emptrain</span>

<span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">):</span>
    <span class="n">outlabels</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
        <span class="nb">input</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="nb">input</span> <span class="o">=</span> <span class="nb">input</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">input</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="n">alphaw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">upA</span><span class="p">)</span>
        <span class="n">betaw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">upB</span><span class="p">)</span>

        <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">alphaw</span><span class="p">)</span>

        <span class="n">z</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">a</span><span class="p">))</span>
        <span class="n">zw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">zw</span><span class="p">,</span><span class="n">betaw</span><span class="p">)</span>
        <span class="n">yhat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
        <span class="n">y1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">yhat</span><span class="p">)</span>

        <span class="n">outlabels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">outlabels</span>

<span class="k">def</span> <span class="nf">prep</span><span class="p">(</span><span class="n">infile</span><span class="p">):</span>
    
    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">infile</span><span class="p">)</span> <span class="k">as</span> <span class="n">myfile</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">myfile</span><span class="p">:</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
            <span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
    
    <span class="n">col1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="nb">input</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:,</span><span class="mi">1</span><span class="p">:]</span>

    <span class="c1"># one hot labels</span>
    <span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">col1</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">col1</span><span class="o">.</span><span class="n">max</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">labels</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">col1</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
    <span class="n">labels</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span><span class="n">col1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
    <span class="n">col_max</span> <span class="o">=</span> <span class="n">col1</span><span class="o">.</span><span class="n">max</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span>

    <span class="k">return</span> <span class="nb">input</span><span class="p">,</span> <span class="n">col1</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span><span class="n">col_max</span>

<span class="k">def</span> <span class="nf">prepval</span><span class="p">(</span><span class="n">valfile</span><span class="p">,</span><span class="n">col_max</span><span class="p">):</span>
    
    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">valfile</span><span class="p">)</span> <span class="k">as</span> <span class="n">myfile</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">myfile</span><span class="p">:</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
            <span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
    
    <span class="n">col1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="nb">input</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:,</span><span class="mi">1</span><span class="p">:]</span>

    <span class="c1"># one hot labels</span>
    <span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">col1</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">col_max</span><span class="p">)</span>
    <span class="n">labels</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">col1</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
    <span class="n">labels</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span><span class="n">col1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>

    <span class="k">return</span> <span class="nb">input</span><span class="p">,</span> <span class="n">col1</span><span class="p">,</span> <span class="n">labels</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>

    <span class="nb">input</span><span class="p">,</span><span class="n">col1</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">col_max</span> <span class="o">=</span> <span class="n">prep</span><span class="p">(</span><span class="n">train_input</span><span class="p">)</span>

    <span class="c1"># init_flag</span>
    <span class="n">alpha</span><span class="p">,</span><span class="n">beta</span> <span class="o">=</span> <span class="n">initialize</span><span class="p">(</span><span class="n">hidden_units</span><span class="p">,</span><span class="nb">input</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">init_flag</span><span class="p">)</span>

    <span class="c1"># bias</span>
    <span class="n">a_ones</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">alpha</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>     
    <span class="n">upA</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">a_ones</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">b_ones</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">beta</span><span class="p">),</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">upB</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">beta</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">b_ones</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">inputv</span><span class="p">,</span><span class="n">col1v</span><span class="p">,</span><span class="n">labelsv</span> <span class="o">=</span> <span class="n">prepval</span><span class="p">(</span><span class="n">validation_input</span><span class="p">,</span><span class="n">col_max</span><span class="p">)</span>

    <span class="c1"># run on training</span>
    <span class="n">upB</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">cross</span><span class="p">,</span><span class="n">emp</span><span class="p">,</span><span class="n">emptrain</span> <span class="o">=</span> <span class="n">train</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">,</span><span class="n">num_epoch</span><span class="p">,</span><span class="n">labels</span><span class="p">,</span><span class="n">learning_rate</span><span class="p">,</span><span class="n">inputv</span><span class="p">,</span><span class="n">labelsv</span><span class="p">)</span>
    <span class="n">outlabels</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">)</span>
    <span class="n">error1</span> <span class="o">=</span> <span class="n">erate</span><span class="p">(</span><span class="n">col1</span><span class="p">,</span><span class="n">outlabels</span><span class="p">)</span>

    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">train_out</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
        <span class="n">np</span><span class="o">.</span><span class="n">savetxt</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span><span class="n">outlabels</span><span class="p">,</span><span class="n">delimiter</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="c1"># run on validation</span>
    <span class="n">outlabels</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">inputv</span><span class="p">,</span><span class="n">upA</span><span class="p">,</span><span class="n">upB</span><span class="p">)</span>
    <span class="n">error2</span> <span class="o">=</span> <span class="n">erate</span><span class="p">(</span><span class="n">col1v</span><span class="p">,</span><span class="n">outlabels</span><span class="p">)</span>

    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">validation_out</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
        <span class="n">np</span><span class="o">.</span><span class="n">savetxt</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span><span class="n">outlabels</span><span class="p">,</span><span class="n">delimiter</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">)</span>

    <span class="c1"># metrics out</span>
    <span class="n">cross</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;error(train): &#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">error1</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>\
        <span class="s1">&#39;error(validation): &#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">error2</span><span class="p">))</span>
    
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">metrics_out</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
        <span class="n">outfile</span><span class="o">.</span><span class="n">writelines</span><span class="p">(</span><span class="n">cross</span><span class="p">)</span>
    
    <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">    Below are extra metrics that I used when graphing my model</span>

<span class="sd">    with open(emp_metrics,&#39;w&#39;) as outfile:  #validation only</span>
<span class="sd">        outfile.writelines(emp)</span>

<span class="sd">    with open(emp_train,&#39;w&#39;) as outfile:    #train only</span>
<span class="sd">        outfile.writelines(emptrain)</span>
<span class="sd">    &#39;&#39;&#39;</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>

</body>







</html>
